import {describe, it, vi, expect} from "vitest";

function jsxRender(Comp, props){ return Comp(props);}   // dummy render of a jsx component

vi.mock("vue");
import {h,createApp,reactive} from "vue";
h.mockImplementation(jsxRender);  // vue jsx 
vi.mock("vue-router");
vi.mock("/src/vuejs/VueRoot");
import { makeRouter} from "/src/vuejs/VueRoot";  

// needed for loading the reactive model modules 
vi.mock("/src/firestoreModel");
vi.mock("/src/DinnerModel");

function clone(x){ return {...x};}       // clone instead of reactive


describe.runIf(makeRouter)("vue bootstrapping uses the router", async function(){
    // these mocks can be at the top of the file but we put each mock near its test
    // Vue mocks:
    createApp.mockImplementation(function(){ return { mount:vi.fn(), use:vi.fn()};});
    
    const vueReactiveMdl= "dummy Vue reactive model";
    vi.doMock("/src/vueReactiveModel", function(){return {reactiveModel:vueReactiveMdl};});
    
    // needed after we unmock and load vueReactieModel:
    reactive.mockImplementation(clone);
    
    it("", async function (test) {
        // mocks are in place, we can load the bootstrapping:
        await import("/src/vuejs/index");
        
        expect(createApp).toHaveBeenCalledTimes(1);
        const app= createApp.mock.results[0].value; 
        
        expect(app.mount).toHaveBeenCalledTimes(1);
        const mountParam= app.mount.mock.lastCall[0]; 
        
        if ( mountParam != "#root") {
            test.skip();
        }
    
        expect(makeRouter).toHaveBeenCalledWith(vueReactiveMdl);

        expect(app.use).toHaveBeenCalledWith(makeRouter.mock.results[0].value);
  });
});


