import { vi, describe, it, expect} from "vitest";
import {render, cleanup} from "@testing-library/react-native";
import {createElement} from "react";

import {SummaryView} from "/src/native-views/summaryView";

import {checkCB} from "./checkCB";

vi.mock("/src/utilities");
import {sortIngredients} from "/src/utilities";

function dummySort(x){  return x; }
sortIngredients.mockImplementation(dummySort);
	
import {getProps} from "./nativeJsxMock";

describe("TW1.3  React Native  Array Rendering and basic styling", function tw1_3() {
    it.for([
	{
	    people:1,
	    ingredients: [
		{ name: "Worcestershire sauce", aisle: "Spices", amount: 6, unit: "ml", id: 1122,  },
		{ id: 1, name: "water", aisle: "(home)", amount: 80, unit: "ml" },
		{ name: "egg", amount: 5, unit: "pcs", aisle: "Eggs & Dairy", id: 1101 }
	    ],
	    expected:{index:1, k:1, header:"Summary for 1 person:", ingr:"water", quant:"80.00", mu:"ml", where:"(home)"  }
	},
        {
	    people:5,
	    ingredients: [
		{ id: 1, name: "water", aisle: "(home)", amount: 80, unit: "ml" },
		{ name: "egg", amount: 5, unit: "pcs", aisle: "Eggs & Dairy", id: 1101 },
		{ aisle: "Produce",  name: "small onion, diced", amount: 0.25,unit: "pcs", id: 1117,  }
	    ],
	    expected:{index:2, k:1117, header:"Summary for 5 persons:", ingr:"small onion, diced", quant:"1.25", mu:"pcs", where:"Produce" }
	}
    ])
    ( "SummaryView flatlist content (render table rows to enable)",
      function tw1_3_1(p, test){
	  const {expected, ...props}=p;
	  const output= render(createElement(SummaryView, props));
	  
          const flatListProps = getProps(output.getByText("iprog.FlatList"));
          if(!flatListProps)
              test.skip();
	  
	  // we expect the header to be
	  expect(output.getByText(expected.header)).toBeTruthy();

	  expect(sortIngredients).toHaveBeenCalledWith(p.ingredients);
	  const sortIngredientsResult=sortIngredients.mock.results[0].value; 
	  expect(flatListProps.data).toEqual(sortIngredientsResult);  
	  
	  // cleanup to prepare another render 
	  cleanup();
	  // we render one ingredient (indicated by expected.index) by invoking the renderItem() callback
	  const outputItem = render(flatListProps.renderItem({item: p.ingredients[expected.index]}));

	    expect(outputItem.queryByText(expected.ingr)).toBeTruthy();
          expect(outputItem.queryByText(expected.where)).toBeTruthy();
          expect(outputItem.getByText(expected.quant+" "+expected.mu)).toBeTruthy();
	  
	  // styling
	  // ...
	  
	  // the key passed to the keyExtractor prop should be the ingredient id stringified
	  expect(flatListProps.keyExtractor(p.ingredients[expected.index])).toBe(expected.k.toString());
	  
	  checkCB(flatListProps.renderItem, "renderItem");
	  checkCB(flatListProps.keyExtractor, "keyExtractor");
      });

});
    
