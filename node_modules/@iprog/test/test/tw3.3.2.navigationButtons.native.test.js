import {vi, describe, expect, it} from "vitest";
import {createElement} from "react";
import { getProps} from "./nativeJsxMock";
import { render, screen, fireEvent } from "@testing-library/react-native";
import {getModule} from "./getModule";
import {customEventWrap} from "./customEventWrap";

// re-run these tests if any of these native views changes
import.meta.glob("/src/native-views/sidebarView.*sx")
import.meta.glob("/src/native-views/detailsView.*sx")
import.meta.glob("/src/native-views/searchResultsView.*sx")

const { SidebarView }= await getModule("/src/native-views/sidebarView");
const { SearchResultsView }= await getModule("/src/native-views/searchResultsView");
const { DetailsView}=await getModule( "/src/native-views/detailsView");


vi.mock("expo-router");

import { router } from "expo-router";

const searchResults=[
    {
      id: 1,
      title: "Spaghetti Carbonara",
      image: "https://example.com/carbonara.jpg",
      sourceUrl: "https://example.com/recipe1",
    },
];

const dishes=[
    {  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...", extendedIngredients:[]}
];

// mocks needed for _layout:
vi.mock("mobx-react-lite");
vi.mock("/src/mobxReactiveModel");
vi.mock("mobx");
vi.mock("/src/firestoreModel");
vi.mock("/src/DinnerModel");

const enable= await getModule("/src/app/_layout");

describe.runIf(enable)("TW 3.3.2 navigation buttons", function(){
    it.runIf(DetailsView)("DetailsView dish adding button should lead to 'sidebar' (home)", function() {

	render(createElement(customEventWrap(DetailsView),
			     { dishData: dishes[0],
			       guests:3,
			       isDishInMenu:false
			     }));

	const addButton = screen.getByText("Add to menu");
	fireEvent.press(addButton);

	expect(router.push).toHaveBeenCalledWith("/");
    });

    it.runIf(SidebarView)("SidebarView dish row press should open dish details", function(){
	render(createElement(customEventWrap(SidebarView),
			     {
				 number:4,
				 dishes
			     }));
				 
	const flatListProps= getProps(screen.getByText("iprog.FlatList"));

	const link= render(flatListProps.renderItem({item:dishes[0]})).getByRole("link");

	fireEvent.press(link);
	expect(router.push).toHaveBeenCalledWith("/details");

    });

    it.runIf(SearchResultsView)("SearchResultsView dish press should lead to details", function(){
	render(createElement(customEventWrap(SearchResultsView),
			     {
				 searchResults
			     }));
	const flatListProps= getProps(screen.getByText("iprog.FlatList"));

	const button=  render(flatListProps.renderItem({item:searchResults[0]})).getByRole("button");
	fireEvent.press(button);
	expect(router.push).toHaveBeenCalledWith("/details");
    });

});
