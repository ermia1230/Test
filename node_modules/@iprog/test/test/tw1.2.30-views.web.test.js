import {describe, it, vi, expect, afterEach} from "vitest";
import {createElement, Fragment} from "react";
import {render, screen, cleanup} from "@testing-library/react";
import {getModule} from "./getModule";

import {SummaryView} from "/src/web-views/summaryView";

// re-run this test if the sidebarView.jsx file changes. getModule doesn't do that
import.meta.glob("/src/views/sidebarView.*sx")
const {SidebarView, noSidebarView}= await getModule("/src/web-views/sidebarView");

let sidebarText;
try{
    sidebarText= SidebarView && typeof SidebarView({number:2, dishes:[]})=="string" ;
}catch(e){}

describe("TW1.2.3 Basic Rendering", function tw1_2() {
    window.React={createElement,Fragment};

    afterEach(cleanup);
    it.for([{people:4, ingredients:[], expected:4},{people:2, ingredients:[], expected:2}])
    ("Summary view shows the number of people", function(p, tst){
	const output= render(createElement(SummaryView, p));
	    
        const span = output.getByTitle("nr guests");
        if(span.textContent==="TODO")
	    tst.skip();
        expect(span.textContent).to.include(p.expected);
    });

    it.skipIf(noSidebarView || sidebarText).for([{number:4, dishes:[], expected:4},
				  {number:7, dishes:[], expected:7}])
    ("SidebarView shows its number prop between two buttons", function(p, tst){
	const {expected, ...props}=p;
	const output= render(createElement(SidebarView, props));
	if(output.queryByText(/stub/))
	    tst.skip();
	
	const buttons = output.queryAllByRole('button');
        expect(buttons.length).toBe(2);
	expect(buttons[0].textContent).toBe("-");
	expect(buttons[1].textContent).toBe("+");

        expect(output.queryByText(expected)).toBeTruthy();
    });


    it.skipIf(noSidebarView || sidebarText).for([{number:5, dishes:[], expected: false},
				  {number:1, dishes:[], expected: true}])
    ("SidebarView's minus button should be disabled if number prop is 1", function(p){
	const {expected, ...props}=p;
	const output= render(createElement(SidebarView, props));
	const buttons= output.queryAllByRole('button');
	
        expect(buttons[0].disabled).toEqual(expected);
    });
});
