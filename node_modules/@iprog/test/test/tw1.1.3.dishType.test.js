import {describe, test, expect, beforeEach} from "vitest";
import { dishType, isKnownTypeCB } from "/src/utilities";

const oldFilter= Array.prototype.filter;
const filterHistory=[];
Array.prototype.filter=function(x){
    filterHistory.push(x);
    return oldFilter.bind(this)(x);
};

const oldFind= Array.prototype.find;
Array.prototype.find=function(x){
    filterHistory.push(x);
    return oldFind.bind(this)(x);
};

import {checkArrayCB} from "./checkCB";

describe("TW1.1.3 filter(CB) exercises: dishType and removeFromMenu", function tw1_1_3() {
    test("isKnownTypeCB recognizes only starter, main course, dessert", function tw1_1_3_1() {
	expect(isKnownTypeCB("starter")).toBeTruthy();
	expect(isKnownTypeCB("main course")).toBeTruthy();
	expect(isKnownTypeCB("dessert")).toBeTruthy();
	expect(isKnownTypeCB("appetizer")).toBeFalsy();
    });

    test("dishType returns a known dish type", function tw1_1_3_2() {
	const dish = {
	    id: 100,
	    title: "Meat balls",
	    dishTypes: ["lunch", "dinner", "main course", "main dish"],
	    pricePerServing: 82.41,
	    summary: "cook better"
	};
	filterHistory.length=0;
	
	expect(dishType(dish)).toBe("main course");
	const lastFindOrFilterParam= filterHistory.pop();
	expect(lastFindOrFilterParam).toBe(isKnownTypeCB);
    });

    test("dishType returns empty string if starter, main course, dessert not present", function tw1_1_3_3() {
	const dish={
	    id: 1,
	    title: "French toast",
	    dishTypes: ["snack", "appetizer"],
	    pricePerServing: 21.34,
	    summary:"should be of unknown type",
	};
	expect(dishType(dish)).toBe("");
    });

    test("dishType returns empty string if dishTypes property not present", function tw1_1_3_4() {
	const dish= {
	    id: 202,
	    title: "Strawberry ice cream",
	    pricePerServing: 14.29,
	    summary: "Here is how you make it... Lore ipsum...",
	};
	expect(dishType(dish)).toBe("");
    });

    test("can remove dishes", async function tw1_1_3_5() {
	const {model:testModel}= await import("/src/DinnerModel");
	// Force a few dishes in the menu, then try to remove one
	const dish100 = {id:100, title:"a dummy dish with id 100"};
	const dish1 = {id:1, title:"the first dummy dish"};
	const dish200 = {id:200, title:"more advanced dummy dish"};;

	testModel.dishes = [dish100, dish1, dish200].filter((d) => d !== undefined);
	filterHistory.length=0;
	testModel.removeFromMenu({
	    id: 1,
	    title: "",
	    pricePerServing: 0,
	    summary: "",
	    extendedIngredients: [],
	});
	const lastFindOrFilterParam= filterHistory.pop();
	
	// Should now be removed
	expect(testModel.dishes).toHaveLength(2);
	expect(testModel.dishes).not.toContainEqual(dish1);
	expect(testModel.dishes).toContainEqual(dish100);
	expect(testModel.dishes).toContainEqual(dish200);
	
	// Remove non-existing dish
	testModel.removeFromMenu({
	    id: 256,
	    title: "",
	    pricePerServing: 0,
	    summary: "",
	    extendedIngredients: [],
	});

	expect(testModel.dishes).toHaveLength(2);
	expect(testModel.dishes).toContainEqual(dish100);
	expect(testModel.dishes).toContainEqual(dish200);

	expect(lastFindOrFilterParam).toBeTruthy();
	checkArrayCB(lastFindOrFilterParam, "filter", "removing from menu");
    });
});
