import { vi, describe, it, expect, afterEach} from "vitest";
import {checkCB} from "./checkCB";
import {getModule} from "./getModule";

vi.mock("mobx-react-lite");
import {observer} from "mobx-react-lite";
observer.mockImplementation(function(x){ return x; }) ;

const setNumberOfGuests= vi.fn(),
      removeFromMenu= vi.fn(),
      setCurrentDishId= vi.fn();

function getMockModel(){
    return {
	numberOfGuests: 2,
	dishes: [],
	setNumberOfGuests,
	removeFromMenu,
	setCurrentDishId,
    };
}

import {SidebarView} from "/src/views/sidebarView";  // aliased to dummy/, a mock

export function runCustomEventTests(framework, customEvents) {
    describe(`TW1.5 ${framework.name} Sidebar Presenter handles custom events and changes Model`, async function(){
        const {Sidebar}= await getModule("/src/"+framework.path  +"/sidebarPresenter");
        
        it.runIf(Sidebar  && customEvents.getCustomEvents("sidebar").complete)
        ("handles the 'onNumberChange' custom event", function() {
            const mockModel = getMockModel();
            const modelMethod= mockModel.setNumberOfGuests;
            framework.render(Sidebar, {model:mockModel});
            
            expect(SidebarView).toHaveBeenCalled();
            
            const props= SidebarView.mock.lastCall[0];

            const customEventName=customEvents.getCustomEvents("sidebar")["increase number"].name;
            const customEventHandler= props[customEventName];
            expect(typeof customEventHandler).toBe("function");
            
            customEventHandler(42);
            expect(modelMethod).toHaveBeenCalledWith(42);
            
            customEventHandler(13);
            expect(modelMethod).toHaveBeenCalledWith(13);

            checkCB(customEventHandler, "onNumberChange custom event handler");

	    // the model must not be changed other than by calling its methods
            expect(mockModel).toEqual({numberOfGuests:2, dishes:[], setNumberOfGuests, removeFromMenu, setCurrentDishId});
            
        });

        it.runIf(Sidebar  && customEvents.getCustomEvents("sidebar").complete)
        ("handles custom event for selecting dishes", function() {
            const mockModel = getMockModel();
            const modelMethod= mockModel.setCurrentDishId;
            
            framework.render(Sidebar, {model:mockModel});
            
            expect(SidebarView).toHaveBeenCalledTimes(1);
            
            const props= SidebarView.mock.lastCall[0];
            const customEventName= customEvents.getCustomEvents("sidebar")["select dish"].name;
            const customEventHandler=  props[customEventName];
            expect(typeof customEventHandler).toBe("function");
            
            const dummyDish={id:25};
            customEventHandler(dummyDish);
            expect(modelMethod).toHaveBeenCalledWith(25);
            
            customEventHandler({id:42});
            expect(modelMethod).toHaveBeenCalledWith(42);

            checkCB(customEventHandler, "custom event handler for dish selection");

	    // the model must not be changed other than by calling its methods
            expect(mockModel).toEqual({numberOfGuests:2, dishes:[], setNumberOfGuests, removeFromMenu, setCurrentDishId});      
        });

        it.runIf(Sidebar  && customEvents.getCustomEvents("sidebar").complete)
        ("handles custom event for removing dishes", function() {
            const mockModel = getMockModel();
            const modelMethod= mockModel.removeFromMenu;
            
            framework.render(Sidebar, {model:mockModel});
            
            expect(SidebarView).toHaveBeenCalledTimes(1);
            
            const props= SidebarView.mock.lastCall[0];
            const customEventName=customEvents.getCustomEvents("sidebar")["remove dish"].name;
            const customEventHandler=  props[customEventName];
            expect(typeof customEventHandler).toBe("function");
            
            const dummyDish={id:25};
            customEventHandler(dummyDish);
            expect(modelMethod).toHaveBeenCalledWith(dummyDish);
            
            customEventHandler({id:42});

            checkCB(customEventHandler, "custom event handler for removing dishes");

	    // the model must not be changed other than by calling its methods
            expect(mockModel).toEqual({numberOfGuests:2, dishes:[], setNumberOfGuests, removeFromMenu, setCurrentDishId});      
        });
    });
}
