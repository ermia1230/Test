import { vi, describe, it, expect, afterEach} from "vitest";
import {getModule} from "./getModule";

vi.mock("mobx-react-lite", function(){
    return {
        observer(x){x.observer=true; return x;}
    };
});

vi.mock("/src/reactjs/sidebarPresenter");
vi.mock("/src/reactjs/searchPresenter");
vi.mock("/src/reactjs/detailsPresenter");
vi.mock("/src/reactjs/summaryPresenter");

vi.mock("/src/vuejs/sidebarPresenter");
vi.mock("/src/vuejs/searchPresenter");
vi.mock("/src/vuejs/detailsPresenter");
vi.mock("/src/vuejs/summaryPresenter");

vi.mock("vue-router", function(){
    return {
        RouterView:vi.fn(),
        createRouter:vi.fn(),
        createWebHashHistory:vi.fn()
    };
});
import {RouterView} from "vue-router"; // mocked

vi.mock("react-router-dom");
import {RouterProvider} from "react-router-dom";

import {reactRender, vueRender} from "./render";

import{ReactRoot} from "/src/reactjs/ReactRoot";
import{VueRoot} from "/src/vuejs/VueRoot";

vi.mock("/src/firestoreModel");
import{connectToPersistence} from "/src/firestoreModel";
vi.mock("/src/views/suspenseView");
import{SuspenseView} from "/src/views/suspenseView";


import.meta.glob("/src/reactjs/sidebarPresenter.*sx")
import.meta.glob("/src/reactjs/detailsPresenter.*sx")
import.meta.glob("/src/reactjs/searchPresenter.*sx")
import.meta.glob("/src/vuejs/sidebarPresenter.*sx")
import.meta.glob("/src/vuejs/detailsPresenter.*sx")
import.meta.glob("/src/vuejs/searchPresenter.*sx")

describe.for([
    {   name:"ReactRoot",   render: reactRender,   routerSpy:RouterProvider, root:ReactRoot},
    {   name:"VueRoot",     render: vueRender,     routerSpy:RouterView , root:VueRoot},
])("TW3.1.3 $name", async function(framework){
    const path= framework.name=="VueRoot"?"vuejs":"reactjs";
    const {Sidebar} = await getModule("/src/"+path+"/sidebarPresenter");
    const sidebar= Sidebar && vi.spyOn(await import("/src/"+path+"/sidebarPresenter"), "Sidebar");

    const summary= vi.spyOn(await import("/src/"+path+"/summaryPresenter"), "Summary");

    it.runIf(connectToPersistence && sidebar)("Presenters not rendered if model.ready is false", async function(){
        // ReactRoot or VueRoot import (aliased) : 
        const props={model:{ready:false}};
        framework.render(framework.root, props);

        expect(SuspenseView).toHaveBeenCalled();
        expect(SuspenseView.mock.lastCall[0]).toEqual(
            expect.objectContaining({
                promise:expect.toBeOneOf([true, expect.any(Object), expect.any(String)])
            }));
        expect(sidebar).not.toHaveBeenCalled();
        expect(summary).not.toHaveBeenCalled();
        expect(framework.routerSpy).not.toHaveBeenCalled();

        if(framework.name==="ReactRoot")
            expect(framework.root.observer, "in order to be reactive on model.ready, ReactRoot must be an observer")
            .toBe(true);
    });

    it.runIf(connectToPersistence && sidebar)("Presenters rendered if model.ready is true", async function(){
        const props={model:{ready:true}};
        framework.render(framework.root, props);

        expect(SuspenseView).not.toHaveBeenCalled();
        expect(sidebar).toHaveBeenCalled();
        if(!framework.routerSpy.mock.lastCall)
            expect(summary).toHaveBeenCalled();
    });    
});

