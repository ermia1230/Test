import { vi, describe, it, expect, afterEach} from "vitest";

import {checkCB} from "./checkCB";

import {getModule} from "./getModule";

vi.mock("mobx-react-lite");
import {observer} from "mobx-react-lite";
observer.mockImplementation(function(x){ return x; }) ;

import {DetailsView} from "/src/views/detailsView";  // aliased to dummy/, a mock

export function runCustomEventTests(framework, customEvents) {
    describe(`TW2.5.1 ${framework.name} Details Presenter handles custom events and changes Model`, async function(){
        const {Details} = await getModule("/src/"+ framework.path+ "/detailsPresenter");

        it.runIf(Details && customEvents.getCustomEvents("details").complete)
        ("handles \"add to menu\" custom event", function(){
	    const addToMenu= vi.fn();
            const mockModel ={
                currentDishPromiseState:{
                    promise:"dummyPromise",
                    data:{ id: 100}
                },
                numberOfGuests: 2,
                dishes: [],
                addToMenu,
            };
            const modelMethod= mockModel.addToMenu;
            
            framework.render(Details, {model:mockModel});
            
            expect(DetailsView).toHaveBeenCalledTimes(1);
            
            const props= DetailsView.mock.lastCall[0];

            const customEventName=customEvents.getCustomEvents("details")["add to menu"].name;
            const customEventHandler=  props[customEventName];
            expect(typeof customEventHandler).toBe("function");

            customEventHandler();
            expect(modelMethod).toHaveBeenCalledWith(
                expect.objectContaining({id:100})
            );

	    // model should not be changed other than by calling its methods
	    expect(mockModel).toEqual({currentDishPromiseState:{promise:"dummyPromise", data:{id:100}}, numberOfGuests:2, dishes:[], addToMenu});
	    
	    mockModel.currentDishPromiseState.data= {id:42};
            customEventHandler();
            expect(modelMethod).toHaveBeenCalledWith(
                expect.objectContaining({id:42})
            );

	    // model should not be changed other than by calling its methods
	    expect(mockModel).toEqual({currentDishPromiseState:{promise:"dummyPromise", data:{id:42}}, numberOfGuests:2, dishes:[], addToMenu});

	    checkCB(customEventHandler, "add to menu custom event handler");
        });
    });
}

