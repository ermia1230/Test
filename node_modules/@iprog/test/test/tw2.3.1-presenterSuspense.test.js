import { vi, describe, it, expect, afterEach} from "vitest";
vi.mock("/src/utilities");

import {SuspenseView} from "/src/views/suspenseView";  // aliased to the dummy/ mock
import {DetailsView} from "/src/views/detailsView";  // aliased to the dummy/ mock
import {SearchFormView} from "/src/views/searchFormView";  // aliased to the dummy/ mock
import {SearchResultsView} from "/src/views/searchResultsView";  // aliased to the dummy/ mock

import {getModule} from "./getModule";

vi.mock("mobx-react-lite");
import {observer} from "mobx-react-lite";
observer.mockImplementation(function(x){ x.observer=true; return x; }) ;

import {reactRender, vueRender} from "./render";

// re-run these tests if any of the details or search presenter changes, in any framework
import.meta.glob("/src/reactjs/detailsPresenter.*sx")
import.meta.glob("/src/vuejs/detailsPresenter.*sx")
import.meta.glob("/src/reactjs/searchPresenter.*sx")
import.meta.glob("/src/vuejs/searchPresenter.*sx")

describe.for([
    {   name:"React/native",   render: reactRender, path: "reactjs" },
    {   name:"Vue",     render: vueRender , path:"vuejs" },
])("TW2.3.1 $name presenter suspense", async function(framework){
    const {Details} = await getModule("/src/"+ framework.path+ "/detailsPresenter");

    describe.runIf(Details)("Details Presenter",function(){
	it.for([
	    { numberOfGuests: 2, dishes: [], currentDishPromiseState:{}, expected:SuspenseView},
	    { numberOfGuests: 5, dishes: [], currentDishPromiseState:{promise:"dummyPromise"}, expected:SuspenseView},
	    { numberOfGuests: 7, dishes: [], currentDishPromiseState:{promise:"dummyPromise", data:"dummyData"}, expected: DetailsView},
	    { numberOfGuests: 7, dishes: [], currentDishPromiseState:{promise:"dummyPromise", error:"dummyError"},expected: SuspenseView},
	])
	("determines when to render SuspenseView or DetailsView", function(p){
	    const {expected, ...model}= p;
	    const name= expected==SuspenseView?"SuspenseView":"DetailsView";
	    
	    const output= framework.render(Details, {model});
	    expect(expected).toHaveBeenCalledTimes(1);
	    const viewReturn= expected.mock.results[0].value;
	    
	    const viewNotShown= expected==SuspenseView?DetailsView:SuspenseView;
	    expect(viewNotShown).not.toHaveBeenCalled();

	    expect(output.container.textContent, "return either SuspenseView or DetailsView")
		.toBe(viewReturn);
	});

	if(framework.name.includes("React"))
	    it("Details is an observer", function(){
		expect(Details.observer).toBeTruthy();   // see mobx-react-lite mock above
	    });
    });

    const {Search} = await getModule("/src/"+ framework.path+ "/searchPresenter");
    describe.runIf(Search)("$name Search Presenter",function(){
        it.for([
	    { numberOfGuests: 2, dishes: [], searchParams:{}, searchResultsPromiseState:{}, expected:SuspenseView},
	    { numberOfGuests: 5, dishes: [], searchParams:{}, searchResultsPromiseState:{promise:"dummyPromise"}, expected: SuspenseView},
	    { numberOfGuests: 7, dishes: [], searchParams:{}, searchResultsPromiseState:{promise:"dummyPromise", data:"dummyData"}, expected:SearchResultsView},
	    { numberOfGuests: 7, dishes: [], searchParams:{}, searchResultsPromiseState:{promise:"dummyPromise", error:"dummyError"},expected:SuspenseView },
	])
	("determines when to render SuspenseView or search Views", function(p){
	    const {expected, ...model}= p;
	    const name= expected==SuspenseView?"SuspenseView":"SearchResultsView";
	    const output= framework.render(Search, {model});
	    expect(SearchFormView).toHaveBeenCalledTimes(1);
	    const formResult= SearchFormView.mock.results[0].value;
	    
	    expect(expected).toHaveBeenCalled();
	    const viewNotShown= expected==SuspenseView?SearchResultsView:SuspenseView;
	    expect(viewNotShown).not.toHaveBeenCalledTimes(1);
	    const expectedResult= expected.mock.results[0].value;

	    expect(output.container.textContent, "render the search form and either suspense or the search results")
		.toBe(formResult+expectedResult);
	});

	if(framework.name.includes("React"))
	    it("Search is an observer", function(){
		expect(Search.observer).toBeTruthy();   // see mobx-react-lite mock above
	    });
    });
});


