import {describe, vi, it, expect} from "vitest";

// re-run these tests if anything happens to the web detailsView
import.meta.glob("/src/views/detailsView.*sx")

import {getModule} from "./getModule";

import {render, cleanup, fireEvent, within} from "@testing-library/react";
import {createElement} from "react";
import {getProps} from "./webJsxMock";
import {checkArrayCB, checkCB} from "./checkCB";
import{customEventWrap}from "./customEventWrap";

const {DetailsView, noDetailsView}= await getModule("/src/web-views/detailsView");

const dish1=    {
    id: 200,
    title: "Chocolate Ice cream",
    dishTypes: ["brunch", "dessert"],
    pricePerServing: 16.42,
    instructions: "Here is how you make it... Lore ipsum... bla",
    sourceUrl:"http://blabla.com/",
    image:"http://blabla.com/image.gif",
    extendedIngredients: [/*ingredients are tested separately*/]
};
const dish2=      {
    id: 201,
    title: "Vanilla Ice cream",
    pricePerServing: 15.22,
    dishTypes: ["dessert", "breakfast", "brunch"],
    instructions: "Here is how you make it... Lore ipsum...",
    sourceUrl:"http://bla.com/",
    image:"http://bla.com/img.jpg",
    extendedIngredients: [/*tested separately*/],
};

describe.runIf(DetailsView)("TW2.4.4 Free rendering, fire custom events: DetailsView", function tw2_4_4() {
    it.for( [
	{
	    dishData:dish1,
	    guests:5,
	    isDishInMenu: false,
	    expected:["82.10"],
	    testIngredient:  {aisle: "Spices", name: "vanilla bean",id: 1128,amount:3,unit: "pcs",    },
	},
	{
	    dishData:dish2,
	    guests:3,
	    isDishInMenu: true,
	    expected:["45.66"],
	    testIngredient: {aisle: "Frozen", name: "ice cream",  id: 1126,amount: 100,unit: "ml", },
	},
    ])
    ("renders price, image, link, cooking instructions, ingredients, \'add to menu\' button", function tw2_4_4_1(p){
	const {expected, testIngredient,...props}= p;
	const mapMock= vi.spyOn(p.dishData.extendedIngredients, "map").mockImplementation(function(){ return "ingredient array rendering"; });
	
	const output= render(createElement(DetailsView, props));
	expect(output.queryByText(new RegExp(p.dishData.pricePerServing)), "show dish price!").toBeTruthy();
	expect(output.queryByText(new RegExp(expected[0])), "show also dish price for all guests!").toBeTruthy();

	expect(output.queryByText(new RegExp(p.dishData.title)), "dish name should be shown").toBeTruthy();

	expect(output.getByRole("img"), "render a nice image for the dish").toBeTruthy();
	expect(output.getByRole("img").src).toBe(p.dishData.image);

	expect(output.getByRole("link"), "render link to dish").toBeTruthy();
	expect(output.getByRole("link").href).toBe(p.dishData.sourceUrl);

	expect(output.queryByText(new RegExp(p.dishData.instructions.slice(30, 100))),
	       "render cooking instructions"
	      ).toBeTruthy();

	expect(output.getByRole("button", {name: /add to menu/i}),
	       "render \"add to menu\" button")
	    .toBeTruthy();
	expect(output.getByRole("button", {name: /add to menu/i}).disabled,
	      "disable the \"add to menu\" button if the dish is already in menu")
	    .toBe(p.isDishInMenu);
	
	// ingredient array rendering:
	expect(output.queryByText("ingredient array rendering")).toBeTruthy();
	expect(mapMock).toHaveBeenCalledTimes(1);
	const mapCallback= mapMock.mock.lastCall[0];
	
	cleanup();
	const ingrRender= render(mapCallback(testIngredient));

	expect(ingrRender.queryByText(new RegExp(testIngredient.name))).toBeTruthy();
	
	expect(ingrRender.queryByText(new RegExp(testIngredient.unit))).toBeTruthy();
	expect(ingrRender.queryByText(new RegExp(testIngredient.amount))).toBeTruthy();

	// test for array rendering key
	expect(getProps(ingrRender.container.children[0])["data-key"]).toBe(testIngredient.id);
    });

    it.for( [
	{
	    dishData:dish1,
	    guests:5,
	    isDishInMenu: false, // so clicking the button makes sense
	},
    ])
    ("fires custom event for adding dish to the menu", function tw2_4_4_2(p){
	const wrappedDetailsView= customEventWrap(DetailsView);
	const output= render(createElement(wrappedDetailsView, p));
	const btn=output.getByRole("button", {name: /add to menu/i});
	expect(btn).toBeTruthy();
	checkCB(getProps(btn).onClick, "add to menu button click event handler");
	fireEvent.click(btn);
	const customEvent= wrappedDetailsView.popCustomEvent();
	// no params! The presenter knows which dish to add
	expect(customEvent.params).toEqual([]); 
    });
});




