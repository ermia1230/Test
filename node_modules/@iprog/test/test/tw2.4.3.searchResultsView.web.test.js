import {describe, vi, it, expect} from "vitest";

// re-run these tests if anything happens to the web searchResultsView
import.meta.glob("/src/views/searchResultsView.*sx")

import {getModule} from "./getModule";

import {render, cleanup, fireEvent} from "@testing-library/react";
import {createElement} from "react";
import {getProps} from "./webJsxMock";
import {checkArrayCB, checkCB} from "./checkCB";
import{customEventWrap}from "./customEventWrap";

const {SearchResultsView, noSearchResultsView}= await getModule("/src/web-views/searchResultsView");

const searchResults = [
    {
	id: 587203,
	title: "Taco Pizza",
	readyInMinutes: 20,
	servings: 6,
	sourceUrl: "https://laurenslatest.com/taco-salad-pizza-with-doritos/",
	openLicense: 0,
	image: "https://laurenslatest.com/wp-content/uploads/2020/12/Taco-Pizza-02-copy.jpg",
	expected: [ "Taco Pizza", "https://laurenslatest.com/wp-content/uploads/2020/12/Taco-Pizza-02-copy.jpg", 587203]
    },
    {
	id: 559251,
	title: "Breakfast Pizza",
	readyInMinutes: 25,
	servings: 6,
	sourceUrl: "http://www.jocooks.com/breakfast-2/breakfast-pizza/",
	openLicense: 0,
	image: "https://www.jocooks.com/wp-content/uploads/2012/04/breakfast-pizza-1-1.jpg",
	expected: ["Breakfast Pizza", "https://www.jocooks.com/wp-content/uploads/2012/04/breakfast-pizza-1-1.jpg", 559251]
    },
];


describe.skipIf(noSearchResultsView)("TW2.4.3 (array) rendering recap, fire custom events: SearchResultsView", function tw2_4_3() {
    it.for( searchResults )
    ("array results (dish image and name)", function tw2_4_3_1(elem){
	const arr= [Math.random()];
	const mapMock= vi.spyOn(arr, "map").mockImplementation(function(){ return "array rendering mock";});

	const output= render(createElement(SearchResultsView, {searchResults:arr}));
	expect(output.queryByText("array rendering mock")).toBeTruthy();
	expect(mapMock).toHaveBeenCalledTimes(1);
	expect(mapMock.mock.lastCall.length).toBe(1); // a single parameter, the callback
	const mapCallback= mapMock.mock.lastCall[0];

	cleanup();
	const {expected, ...searchResult}=elem;
	const elementRender= render(mapCallback(searchResult));
	expect(elementRender.getByText(expected[0])).toBeTruthy();
	expect(elementRender.queryAllByRole("img").length).toBe(1); // one image
	expect(elementRender.getByRole("img").src).toBe(expected[1]);	
	expect(elementRender.getByRole("img").height).toBe(100);

	const span=elementRender.container.children[0];
	expect(span.tagName).toBe("SPAN");
	expect(getProps(span)["data-key"]).toBe(expected[2]);
	expect(window.getComputedStyle(span).display).toBe("inline-block");
	checkArrayCB(mapCallback, "map", "rendering search resuls");
    });
    
    it.for( searchResults )
    ("fires custom event on dish click", function tw2_4_3_2(elem){
	const arr= [Math.random()];
	const mapMock= vi.spyOn(arr, "map").mockImplementation(function(){ return "array rendering mock";});
	const wrappedSearchResultsView= customEventWrap(SearchResultsView);
	const output= render(createElement(wrappedSearchResultsView, {searchResults:arr}));
	expect(mapMock).toHaveBeenCalledTimes(1);
	const mapCallback= mapMock.mock.lastCall[0];

	cleanup();
	const {expected, ...data}=elem;
	const elementRender= render(mapCallback(data));
	const span=elementRender.container.children[0];

	checkCB(getProps(span).onClick, "dish click event handler");
	fireEvent.click(span);
	const customEvent= wrappedSearchResultsView.popCustomEvent();
	expect(customEvent.params).toEqual([data]);
	
    });


});
