import { vi, describe, it, expect, afterEach} from "vitest";

import {checkCB} from "./checkCB";

import {getModule} from "./getModule";

vi.mock("mobx-react-lite");
import {observer} from "mobx-react-lite";
observer.mockImplementation(function(x){ return x; }) ;

import {SearchFormView} from "/src/views/searchFormView";  // aliased to dummy/, a mock
import {SearchResultsView} from "/src/views/searchResultsView";  // aliased to dummy/, a mock

const doSearch= vi.fn(),
      setSearchQuery= vi.fn(),
      setSearchType= vi.fn(),
      setCurrentDishId= vi.fn();

export function runCustomEventTests(framework, customEvents) {
    describe(`TW2.5.2 ${framework.name} Search Presenter handles custom events and changes Model`, async function(){
        const {Search} = await getModule("/src/"+ framework.path+ "/searchPresenter");

        it.runIf(Search &&  customEvents.getCustomEvents("searchForm").complete)
        ("handles the search form custom events", function(){
            const params= [Math.random()];

	 
            const mockModel = {
                searchResultsPromiseState:{
                    promise:"dummyPromise",
                    data:[{ id: 100}, {id:101}]
                },
                setSearchQuery,
                setSearchType,
                doSearch,
                searchParams:params,
                setCurrentDishId
            };
            const modelMethods=[ mockModel.setSearchQuery,  mockModel.setSearchType,  mockModel.doSearch];
            
            framework.render(Search, {model:mockModel});

            expect(SearchFormView).toHaveBeenCalledTimes(1);
            
            const props= SearchFormView.mock.lastCall[0];

            const textCustomEventName= customEvents.getCustomEvents("searchForm")["search text change"].name;
            const textHandler=  props[textCustomEventName];
            textHandler("bla");
            expect(modelMethods[0]).toHaveBeenCalledWith("bla");
            textHandler("blabla");
            expect(modelMethods[0]).toHaveBeenCalledWith("blabla");

            const typeCustomEventName=customEvents.getCustomEvents("searchForm")["search type change"].name; 
            const typeHandler=  props[typeCustomEventName];
            typeHandler("bla");
            expect(modelMethods[1]).toHaveBeenCalledWith("bla");
            typeHandler("blabla");
            expect(modelMethods[1]).toHaveBeenCalledWith("blabla");

            const searchCustomEventName= customEvents.getCustomEvents("searchForm")["search now"].name;
            const searchHandler= props[searchCustomEventName];
            searchHandler();
            expect(modelMethods[2]).toHaveBeenCalledWith(params);

            checkCB(textHandler, "text change event handler");
            checkCB(typeHandler, "type change event hndler");
            checkCB(searchHandler, "search event handler");

	    // model should not be changed other than by calling its methods
	    expect(mockModel).toEqual({
		searchResultsPromiseState:{
                    promise:"dummyPromise",
                    data:[{ id: 100}, {id:101}]
		},
		setSearchQuery,
		setSearchType,
		doSearch,
                searchParams:params,
                setCurrentDishId,
            });
        });


        it.runIf(Search &&  customEvents.getCustomEvents("searchResults").complete)
        ("handles the search results custom event", function(){
            const params= [Math.random()];
            const mockModel = {
                searchResultsPromiseState:{
                    promise:"dummyPromise",
                    data:[{ id: 100}, {id:101}]
                },
                setSearchQuery,
                setSearchType,
                doSearch,
                searchParams:params,
                setCurrentDishId,
            };
            const modelMethod= mockModel.setCurrentDishId;
            
            framework.render(Search, {model:mockModel});

            expect(SearchResultsView).toHaveBeenCalledTimes(1);
            const props= SearchResultsView.mock.lastCall[0];

            const customEventName=customEvents.getCustomEvents("searchResults")["search result chosen"].name;
            const customEventHandler= props[customEventName];
            customEventHandler({id:45});
            expect(modelMethod).toHaveBeenCalledWith(45);
            customEventHandler({id:42});
            expect(modelMethod).toHaveBeenCalledWith(42);

            checkCB(customEventHandler, "serch result choice custom event handler");

	    // model should not be changed other than by calling its methods
	    expect(mockModel).toEqual({
		searchResultsPromiseState:{
                    promise:"dummyPromise",
                    data:[{ id: 100}, {id:101}]
		},
		setSearchQuery,
		setSearchType,
		doSearch,
                searchParams:params,
                setCurrentDishId,
            });
        });
    });
}
