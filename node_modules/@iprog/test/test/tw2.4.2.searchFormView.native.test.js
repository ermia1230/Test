import {describe, vi, it, expect} from "vitest";

// re-run these tests if anything happens to the native searchFormView
import.meta.glob("/src/native-views/searchFormView.*sx")

import {getModule} from "./getModule";

const {SearchFormView, noSearchFormView} =await getModule("/src/native-views/searchFormView");

import { TextInput } from "react-native";
import {render, fireEvent} from "@testing-library/react-native";
import {createElement} from "react";
import {getProps} from "./nativeJsxMock";

vi.mock("expo-router", ()=>({
    router:{
	push: vi.fn(()=>null)
    }
}));

import { checkCB } from "./checkCB";
import{customEventWrap}from "./customEventWrap";

describe.skipIf(noSearchFormView)("TW2.4.2  React Native  rendering recap, fire custom events: SearchFormView", function tw2_4_2() {
    it.for( [{dishTypeOptions: [], expected:[undefined, 0]},
             {dishTypeOptions: ["someType"], text:"bla", type:"someType", expected:["bla", 1]}])
    ("renders textbox, segmented control box and uses its text and type props", function tw2_4_2_1(p){
	const{expected, ...props}=p;
	const output= render(createElement(SearchFormView, props));
	
	const segmentedControlProps = getProps(output.getByText("iprog.SegmentedControl"));
	
	expect(output.UNSAFE_getByType(TextInput)).toBeTruthy();
	expect(output.UNSAFE_getByType(TextInput).props.value).toBe(expected[0]);
	
	expect(segmentedControlProps.values.length).toBe(props.dishTypeOptions.length + 1);
	expect(segmentedControlProps.selectedIndex).toBe(expected[1]);
    });
    
    it.for([ {dishTypeOptions: [], expected:["All"]},
             {dishTypeOptions: ["start", "main courze", "desser"], 
              expected: ["All", "start", "main courze", "desser"]}])
    ("renders dishTypeOptions prop",function tw2_4_2_2(p){
	const{expected, ...props}=p;    
	const output= render(createElement(SearchFormView, props));
	const segmentedControlProps = getProps(output.getByText("iprog.SegmentedControl"));
	
	expect(segmentedControlProps.values).toEqual(expected);
    });
    
    it("SearchFormView fires custom events on text or type change (send text, type as parameter), and on keyboard enter", function tw2_4_2_3(){
	const wrappedSearchFormView= customEventWrap(SearchFormView);
	
	const output= render(createElement(wrappedSearchFormView, {dishTypeOptions: ["someType"], text:"bla", type:"someType"}));
	
	// Test text input
	const input = output.UNSAFE_getByType(TextInput);
	
	checkCB(getProps(input).onChangeText, "textbox onChangeText event handler");
	checkCB(getProps(input).onSubmitEditing, "textbox onSubmitEditing event handler");
	
	fireEvent.changeText(input, "some pizza");
	const textEvent= wrappedSearchFormView.popCustomEvent("on text input change");
	expect(textEvent.params).toEqual(["some pizza"]);
	
	fireEvent(input, "submitEditing", {});
	const searchEvent1= wrappedSearchFormView.popCustomEvent("on text input keyboard enter (search)");
	expect(searchEvent1.params).toEqual([]);
	wrappedSearchFormView.clearCustomEvents();
	
	// Test type selection
	const picker = output.getByText("iprog.SegmentedControl");
	expect(getProps(picker).values.length).toBe(2);
	checkCB(getProps(picker).onValueChange, "SegmentedControl onValueChange eventHandler");
	
	fireEvent(picker, "valueChange", "starter");
	const customEvents = wrappedSearchFormView.peekAllCustomEvents();
	expect(customEvents.length).toBe(2);
	
	// Assume that the custom event changing the type is triggered first
	const pickerEvent= wrappedSearchFormView.popCustomEvent("on segmented control type change");
	expect(pickerEvent.params).toEqual(["starter"]);
	
	const searchEvent2= wrappedSearchFormView.popCustomEvent("on segmented control type search triggered");
	expect(searchEvent2.params).toEqual([]);
	
	expect(searchEvent2.name).not.toBe(pickerEvent.name);
	expect(pickerEvent.name).not.toBe(textEvent.name);
	expect(textEvent.name).not.toBe(searchEvent2.name);
	expect(searchEvent1.name).toBe(searchEvent2.name);
    });
});

