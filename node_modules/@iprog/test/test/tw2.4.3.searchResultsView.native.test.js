import {describe, vi, it, expect} from "vitest";
import { Pressable } from "react-native"

// re-run these tests if anything happens to the native searchResultsView
import.meta.glob("/src/native-views/searchResultsView.*sx")

import {getModule} from "./getModule";

import {render, cleanup, fireEvent} from "@testing-library/react-native";
import {createElement} from "react";
import {getProps} from "./nativeJsxMock";
import {checkArrayCB, checkCB} from "./checkCB";
import{customEventWrap}from "./customEventWrap";

vi.mock("expo-router", ()=>({
    router:{
	push: vi.fn(()=>null)
    }
}));

const {SearchResultsView, noSearchResultsView}= await getModule("/src/native-views/searchResultsView");

const searchResults = [
    {
	id: 587203,
	title: "Taco Pizza",
	readyInMinutes: 20,
	servings: 6,
	sourceUrl: "https://laurenslatest.com/taco-salad-pizza-with-doritos/",
	openLicense: 0,
	image: "https://laurenslatest.com/wp-content/uploads/2020/12/Taco-Pizza-02-copy.jpg",
	expected: [ "Taco Pizza", "https://laurenslatest.com/wp-content/uploads/2020/12/Taco-Pizza-02-copy.jpg", 587203]
    },
    {
	id: 559251,
	title: "Breakfast Pizza",
	readyInMinutes: 25,
	servings: 6,
	sourceUrl: "http://www.jocooks.com/breakfast-2/breakfast-pizza/",
	openLicense: 0,
	image: "https://www.jocooks.com/wp-content/uploads/2012/04/breakfast-pizza-1-1.jpg",
	expected: ["Breakfast Pizza", "https://www.jocooks.com/wp-content/uploads/2012/04/breakfast-pizza-1-1.jpg", 559251]
    },
];


describe.skipIf(noSearchResultsView)("TW2.4.3 (Flatlist) rendering recap, fire custom events: SearchResultsView", function tw2_4_3() {
    it.for( searchResults )
    ("renders FlatList with correct configuration, (dish image and name)", function tw2_4_3_1(elem){
	const {expected, ...searchResult}=elem;
	const arr= [Math.random()];
	
	const output= render(createElement(SearchResultsView, {searchResults:arr}));
	const flatListProps = getProps(output.getByText("iprog.FlatList"));
	expect(flatListProps.numColumns).toBe(2);
	expect(flatListProps.data).toBe(arr);
	expect(flatListProps.keyExtractor(searchResult)).toBe(expected[2].toString());
	
	cleanup();
	const elementRender= render(flatListProps.renderItem({item: searchResult}));
	
	const title = elementRender.getByText(expected[0]);
	expect(elementRender.getByText(expected[0])).toBeTruthy();
	expect(getProps(title).numberOfLines, "dish has limited title to 3 lines").toBe(3);
	
	const images = elementRender.getAllByText("iprog.Image");
	expect(images.length).toBe(1); // one image
	
	const imageProps = getProps(images[0]);
	expect(imageProps.source?.uri ?? imageProps.source).toBe(expected[1]);	
	expect(imageProps.style, "render dish image with right styling").toMatchObject({
            width: "100%",
            aspectRatio: 1,
            borderRadius: 8,
	});
	
	checkCB(flatListProps.renderItem, "renderItem");
	checkCB(flatListProps.keyExtractor, "keyExtractor");
    });

    it.for( searchResults )
    ("fires custom event on dish click", function tw2_4_3_2(elem){
	const {expected, ...data}=elem;
	const arr= [Math.random()];
	
	const wrappedSearchResultsView= customEventWrap(SearchResultsView);
	const output= render(createElement(wrappedSearchResultsView, {searchResults:arr}));
	const flatListProps = getProps(output.getByText("iprog.FlatList"));
	expect(flatListProps.numColumns).toBe(2);
	expect(flatListProps.data).toBe(arr);
	expect(flatListProps.keyExtractor(data)).toBe(expected[2].toString());

	cleanup();
	const elementRender= render(flatListProps.renderItem({item: data}));
	const buttons = elementRender.UNSAFE_getAllByType(Pressable);

	checkCB(buttons[0].props.onPress, "dish onPress event handler");
	fireEvent.press(buttons[0]);
	const customEvent= wrappedSearchResultsView.popCustomEvent();
	expect(customEvent.params).toEqual([data]);
    });
});
