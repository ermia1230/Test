import {describe, it, vi, expect} from "vitest";
import {render, screen} from "@testing-library/react-native";
import {createElement, Fragment} from "react";
import {getProps} from "./nativeJsxMock";
import {getModule} from "./getModule";

import {SummaryView} from "/src/native-views/summaryView";
const {SidebarView, noSidebarView}= await getModule("/src/native-views/sidebarView");

describe("TW1.2.3  React Native  Basic Rendering", function tw1_2_3() {

    it.for([{people:4, ingredients:[], expected:"4 persons"},{people:1, ingredients:[], expected:"1 person"}])
    ("Summary view shows the number of people", function(p, tst){
	const output= render(createElement(SummaryView, p));
	
        expect(output.getByText(p.expected, { exact: false })).toBeTruthy();
    });
    
    it.skipIf(noSidebarView).for([{number:4, dishes:[], expected: "4 Guests"},
				  {number:7, dishes:[], expected: "7 Guests"}])
    ("SidebarView shows its number prop between two buttons", function(p){
	const {expected, ...props}=p;
	const output= render(createElement(SidebarView, props));
	
        // Check guest count display
        expect(output.getByText(expected)).toBeTruthy();
	
	// Get counter pressables
	const buttons = output.getAllByRole('button');
	const counterButtons = buttons.slice(0, 2); // First two are the counter buttons
	
        // Check button text content
        expect(counterButtons[0]).toHaveTextContent("-");
        expect(counterButtons[1]).toHaveTextContent("+");
	
        // Check button state
        expect(counterButtons[0].props.disabled).toBeFalsy();
	
    });


    it.skipIf(noSidebarView).for([{number:5, dishes:[], expected:{text: "5 Guests", disabled: false}},
                  {number:1, dishes:[], expected:{text: "1 Guest", disabled: true}}])
    ("SidebarView's minus button should be disabled if number prop is 1", function(p){
	const {expected, ...props}=p;
	const output= render(createElement(SidebarView, props));
	
        expect(output.getByText(expected.text)).toBeTruthy();
	
	const [minusButton] = output.getAllByRole("button");
	
        expect(minusButton.props.accessibilityState.disabled).toBe(expected.disabled);
    });
});
