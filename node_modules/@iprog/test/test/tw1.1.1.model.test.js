import {describe, it, vi, expect} from "vitest";

vi.mock("/src/utilities");
vi.mock("/src/dishSource");
vi.mock("/src/resolvePromise");

describe("TW1.1.1 JavaScript Basics", function tw1_1_1() {

    it("can set current dish", async function tw1_1_1_1() {
	const {model:testModel}= await import("/src/DinnerModel");
	expect(testModel.currentDishId).toBeNull();

	testModel.setCurrentDishId(1);
	expect(testModel.currentDishId).toBe(1);

	testModel.setCurrentDishId(3);
	expect(testModel.currentDishId).toBe(3);

    });
    
    it("number of guests can only be set to a positive integer", async function tw1_1_1_2() {
	const {model:testModel}= await import("/src/DinnerModel");
	expect(testModel, "Model could not be imported, please check the top of your Console!").toBeDefined();
	expect(testModel.numberOfGuests).toBe(2);
	expect(testModel.dishes).toEqual([]);
	expect(testModel.dishes.length).toBe(0);
	
	testModel.setNumberOfGuests(1);
	expect(testModel.numberOfGuests).toBe(1);
	
	testModel.setNumberOfGuests(2);
	expect(testModel.numberOfGuests).toBe(2);
	
	const msg = "number of guests not a positive integer";
	
	// now we try a few illegal number-of-guests values. They should throw an Error.
	// the way to do that in Mocha is to define a CB that should throw, and pass it to expect()
	function tw1_1_1_1_throw1CB(){ testModel.setNumberOfGuests(-1); }
	function tw1_1_1_1_throw2CB(){ testModel.setNumberOfGuests(0); }
	function tw1_1_1_1_throw3CB(){ testModel.setNumberOfGuests(3.14159265); }
	
	expect(tw1_1_1_1_throw1CB).toThrow(msg);
	expect(tw1_1_1_1_throw2CB).toThrow(msg);
	expect(tw1_1_1_1_throw3CB).toThrow(msg);
    });
    
    it("can add dishes", async function tw1_1_1_3() {
	const {model:testModel}= await import("/src/DinnerModel");
	testModel.addToMenu({id:13}); // a simulated dish, an object with just an id
	expect(testModel.dishes.length).toBe(1);
	
	testModel.addToMenu({id:42}); // a simulated dish, an object with just an id
	expect(testModel.dishes.length).toBe(2);
	
	testModel.addToMenu({id:200});// a simulated dish, an object with just an id
	expect(testModel.dishes.length).toBe(3);
	
	expect(testModel.dishes).toContainEqual({id:200});
	expect(testModel.dishes).toContainEqual({id:42});
	expect(testModel.dishes).toContainEqual({id:13});
    });
});
