import {describe, vi, it, expect} from "vitest";

// re-run these tests if anything happens to the native detailsView
import.meta.glob("/src/native-views/detailsView.*sx")

import {getModule} from "./getModule";
import { Linking, Text } from "react-native";
import {render, cleanup, fireEvent, within} from "@testing-library/react-native";
import {createElement} from "react";
import {getProps} from "./nativeJsxMock";
import {checkArrayCB, checkCB} from "./checkCB";
import{customEventWrap}from "./customEventWrap";

const {DetailsView, noDetailsView}= await getModule("/src/native-views/detailsView");

// Mock the Linking
vi.mock("react-native/Libraries/Linking/Linking", () => ({
    openURL: vi.fn(),
}));
  
vi.mock("expo-router", ()=>({
    router:{
      push: vi.fn(()=>null)
    }
}));

const dish1=    {
    id: 200,
    title: "Chocolate Ice cream",
    dishTypes: ["brunch", "dessert"],
    pricePerServing: 16.42,
    sourceUrl:"http://blabla.com/",
    image:"http://blabla.com/image.gif",
    extendedIngredients: [/*ingredients are tested separately*/],
    analyzedInstructions: [{steps: [/*instructions are tested separately*/]}],
};
const dish2=      {
    id: 201,
    title: "Vanilla Ice cream",
    pricePerServing: 15.22,
    dishTypes: ["dessert", "breakfast", "brunch"],
    sourceUrl:"http://bla.com/",
    image:"http://bla.com/img.jpg",
    extendedIngredients: [/*tested separately*/],
    analyzedInstructions: [{steps: [/*tested separately*/]}],
};

describe.runIf(DetailsView)("TW2.4.4  React Native  Free rendering, fire custom events: DetailsView", function tw2_4_4() {
    it.for( [
	{
	    dishData:dish1,
	    guests:5,
	    isDishInMenu: false,
	    expected:["82.10", true],
	    testIngredient:  {aisle: "Spices", name: "vanilla bean",id: 1128,amount:3,unit: "pcs",    },
        testInstruction:  {number: 1, step: "Step 1 instruction"},
	},
	{
	    dishData:dish2,
	    guests:3,
	    isDishInMenu: true,
	    expected:["45.66", false],
	    testIngredient: {aisle: "Frozen", name: "ice cream",  id: 1126,amount: 100,unit: "ml", },
        testInstruction:  {number: 3, step: "Step 3 instruction"},
	},
    ])
    ("renders price, image, link, cooking instructions, ingredients, \'add to menu\' button", function tw2_4_4_1(p){
	const {expected, testIngredient, testInstruction,...props}= p;
	const ingrMapMock= vi.spyOn(p.dishData.extendedIngredients, "map").mockImplementation(function(){ return createElement(Text, {}, "ingredient array rendering"); });
	const instrMapMock= vi.spyOn(p.dishData.analyzedInstructions?.[0]?.steps, "map").mockImplementation(function(){ return createElement(Text, {}, "instruction array rendering"); });
	
	const output= render(createElement(DetailsView, props));
	//output.debug()
	expect(output.queryByText(new RegExp(p.dishData.pricePerServing)), "show dish price!").toBeTruthy();
	expect(output.queryByText(new RegExp(expected[0])), "show also dish price for all guests!").toBeTruthy();
	
	expect(output.queryByText(new RegExp(p.dishData.title)), "dish name should be shown").toBeTruthy();
	
	const image = output.getByText("iprog.Image");
	expect(image, "render a nice image for the dish").toBeTruthy();
	expect(getProps(image).source?.uri ?? getProps(image).source).toBe(p.dishData.image);
	
	const moreInfoButton = output.getByRole("button", {name: /more info/i}); //getByText(/more info/i)
	expect(moreInfoButton, "render \"more info\" button").toBeTruthy();
	checkCB(getProps(moreInfoButton).__onPress);
	
	fireEvent.press(moreInfoButton);
	expect(Linking.openURL).toHaveBeenCalledWith(p.dishData.sourceUrl);
	
	const addButton = output.getByRole("button", {name: /add(ed)? to menu/i});
	expect(addButton, "render \"add to menu\" button").toBeTruthy();
	expect(getProps(addButton).accessibilityState.disabled,
	       "disable the \"add to menu\" button if the dish is already in menu")
	    .toEqual(p.isDishInMenu);
	
	// ingredient array rendering:
	expect(output.queryByText("ingredient array rendering")).toBeTruthy();

	// this test, if we use it, must be here because the rendering below will destroy the text
    expect(output.queryByText("instruction array rendering")).toBeTruthy();
	
	expect(ingrMapMock).toHaveBeenCalledTimes(1);
	const ingrMapCallback= ingrMapMock.mock.lastCall[0];  
	
	cleanup();
	const ingrRender= render(ingrMapCallback(testIngredient));
	
	expect(ingrRender.queryByText(new RegExp(testIngredient.name))).toBeTruthy();
	
	expect(ingrRender.queryByText(new RegExp(testIngredient.unit))).toBeTruthy();
	expect(ingrRender.queryByText(new RegExp(testIngredient.amount))).toBeTruthy();

	// test for array rendering key
	expect(ingrRender.UNSAFE_root.children[0]._fiber.return.key).toBe(testIngredient.id.toString());


	// instruction array rendering:
	expect(instrMapMock).toHaveBeenCalledTimes(1);
	const instrMapCallback= instrMapMock.mock.lastCall[0];
	
	cleanup();

    const instrRender= render(instrMapCallback(testInstruction));
	    
    expect(instrRender.queryByText(new RegExp(testInstruction.number))).toBeTruthy();
    expect(instrRender.queryByText(new RegExp(testInstruction.steps))).toBeTruthy();
	    
    // test for array rendering key
    expect(instrRender.UNSAFE_root.children[0]._fiber.return.key).toBe(testInstruction.number.toString());
        
    checkArrayCB(instrMapCallback);
	checkArrayCB(ingrMapCallback);
    });

    it.for( [
	{
	    dishData:dish1,
	    guests:5,
	    isDishInMenu: false, // so clicking the button makes sense
	},
    ])
    ("fires custom event for adding dish to the menu", function tw2_4_4_2(p){
	const wrappedDetailsView= customEventWrap(DetailsView);
	const output= render(createElement(wrappedDetailsView, p));
	const btn=output.getByRole("button", {name: /add(ed)? to menu/i});
	expect(btn).toBeTruthy();
	checkCB(getProps(btn).__onPress);
	fireEvent.press(btn);
	const customEvent= wrappedDetailsView.popCustomEvent();
	// no params! The presenter knows which dish to add
	expect(customEvent.params).toEqual([]); 
    });
});




