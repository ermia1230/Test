import {describe, vi, it, expect, afterEach} from "vitest";

// re-run these tests if anything happens to the web searchFormView
import.meta.glob("/src/views/searchFormView.*sx")

import {getModule} from "./getModule";

const {SearchFormView, noSearchFormView} =await getModule("/src/web-views/searchFormView");

import {render, cleanup, fireEvent} from "@testing-library/react";
import {createElement} from "react";
import {getProps} from "./webJsxMock";
import {checkArrayCB, checkCB} from "./checkCB";
import{customEventWrap}from "./customEventWrap";

describe.skipIf(noSearchFormView)("TW2.4.2 rendering recap, fire custom events: SearchFormView", function tw2_4_2() {
    afterEach(cleanup);
    it.for( [{dishTypeOptions: [], expected:["", ""]},
	     {dishTypeOptions: ["someType"], text:"bla", type:"someType", expected:["bla", "someType"]}])
    ("renders textbox, SELECT box and button, and uses its text and type props", function tw2_4_2_1(p){
	const{expected, ...props}=p;
	const output= render(createElement(SearchFormView, props));

	expect(output.queryAllByRole('textbox').length).toBe(1);
        expect(output.queryAllByRole('combobox').length).toBe(1);
        expect(output.queryAllByRole("button").length).to.be.gte(1);
        expect(output.queryByRole("button", {name: /search/i})).toBeTruthy();

        expect(output.queryAllByRole('textbox')[0].value).toBe(expected[0]);
        expect(output.queryAllByRole('combobox')[0].value).toBe(expected[1]);
    });

    it.for([{dishTypeOptions: ["start", "main courze", "desser"]}])
    ("renders dishTypeOptions prop (array rendering)",function tw2_4_2_2(p){
	const{expected, ...props}=p;
	const map= vi.spyOn(props.dishTypeOptions, "map").mockImplementation(()=>"array rendering");
	
	const output= render(createElement(SearchFormView, props));
	expect(map).toHaveBeenCalledTimes(1);
	expect(output.getByText("array rendering")).toBeTruthy();
	const choose= output.queryAllByRole("option");
	expect(choose.length).toBe(1);
	expect(choose[0].textContent).toBe("Choose:");
	
	const mapCallback= map.mock.lastCall[0];

	cleanup();
	const oneOption= render(createElement("select", {}, mapCallback("desser")));
	const options= oneOption.queryAllByRole("option");
	expect(options.length).toBe(1);
	expect(options[0].textContent).toBe("desser");

	checkArrayCB(mapCallback, "map", "rendering options");
    });

    it("SearchFormView fires custom events on text or type change (send text, type as parameter), and on button press", function tw2_4_2_3(){
	const wrappedSearchFormView= customEventWrap(SearchFormView);

	const output= render(createElement(wrappedSearchFormView, {dishTypeOptions: ["someType"], text:"bla", type:"someType"}));

	const textBox=output.getByRole("textbox");
	checkCB(getProps(textBox).onChange, "textbox onChange event handler");
	fireEvent.change(textBox, {target:{value:"bla2"}});
	const textEvent= wrappedSearchFormView.popCustomEvent("on textbox change");
	expect(textEvent.params).toEqual(["bla2"]);

	const selectBox=output.getByRole('combobox');

	// we need options for getPropx to work
	// two options are expected: "Choose:" and "someType"
	expect(output.queryAllByRole("option").length).toBe(2);
	
	checkCB(getProps(selectBox).onChange, "select box onChange event handler");

	// we invoke the event handler directly rather than firing the event, due to this bug
	// https://github.com/testing-library/react-testing-library/issues/908
	getProps(selectBox).onChange({target:{value:"bla7"}});

	const selectEvent= wrappedSearchFormView.popCustomEvent("on combobox change");
	expect(selectEvent.params).toEqual(["bla7"]);

	const searchBtn=output.getByRole("button", {name: /search/i});
	checkCB(getProps(searchBtn).onClick, "search button onClick event handler");
	fireEvent.click(searchBtn);
	const searchEvent= wrappedSearchFormView.popCustomEvent("on search button press");
	expect(searchEvent.params).toEqual([]); // no params

	expect(searchEvent.name).not.toBe(selectEvent.name);
	expect(selectEvent.name).not.toBe(textEvent.name);
	expect(textEvent.name).not.toBe(searchEvent.name);
    });
});

