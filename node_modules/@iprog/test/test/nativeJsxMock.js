import {vi} from "vitest";
import {Text, FlatList} from "react-native";
import {Image} from "expo-image";
import SegmentedControl from "@react-native-segmented-control/segmented-control";

// none of the expo stuff works in the vitest environment because it uses some globalThis
// but we don't need them anyway for testing so we mock them

vi.mock("expo-image", function(){
  return {
    Image: vi.spyOn({ Image(){}}, 'Image')
  };
});
vi.mock("expo-router", function(){
    return {
      router:{
        push:vi.fn()
      }
    };
});

// mock 3rd party component, we only need its props
vi.mock("@react-native-segmented-control/segmented-control", function(){
  return {
    default: vi.spyOn({SegmentedControl(){}}, "SegmentedControl")
  };
});

// not used right now, should be createElement(c1,{... p1, ...evts(props)}, ...rest)
function evts(prps){
    // storing the original onEvent listener as __onEvent prop
    return prps?Object.keys(prps).filter(x=>x.startsWith("on")).reduce((acc,k)=>({...acc, ["__"+k]:prps[k]}), {}):{};
}

// FlatList does not work in the vitest environment, but we actually only need its props
// so we transform it into a Text with the content "iprog.FlatList"
// Same goes for Image and SegmentedControl

function transformComp(comp, props){
  if(comp===FlatList || comp==Image || comp==SegmentedControl){
    return [Text, {...props, children:["iprog."+comp.name]}];
  }
  return [comp, props];
}

import {createElement, Fragment} from "react";

window.React={
  createElement(comp, props, ...rest){
    const [c1, p1]= transformComp(comp, props);
      return createElement(c1,{... p1, ...evts(props)}, ...rest);   
  },
  Fragment  
};

export const React= window.React;
/*
vi.mock("react/jsx-dev-runtime", async function(importOriginal){
  const jsxz= (await importOriginal()).default
  const jsxDEVOriginal= jsxz.jsxDEV;
  
  return {
    ... jsxz,
    jsxDEV(comp, props, ...rest){
      //    console.log("jsxs ", comp);
      const [c1, p1]= transformComp(comp, props);
      return jsxDEVOriginal(c1,{... p1, ...evts(props)}, ...rest);   
    },
  }
});
 */

// get the original props of a FlatList, Image, SegmentedControl, etc.
// getProps(getByText("iprog.FlatList"))
export function getProps(element){
  return element._fiber.stateNode.props;
}
