import {describe, it, expect} from "vitest";
import { compareDishesCB, sortDishes } from "/src/utilities";

const dishesConst = [
    {    id: 1,    title: "French toast",    dishTypes: ["snack", "appetizer"],    pricePerServing: 21.34,  },
    {    id: 2,    title: "Sourdough Starter",    pricePerServing: 11.22,    dishTypes: ["starter", "appetizer"],  },
    {    id: 3,    title: "Baked Brie with Peaches",    dishTypes: ["snack", "starter"],    pricePerServing: 10.81,  },
    {    id: 4,    title: '"Sour Cream Cucumbers"',    dishTypes: ["antipasti", "starter", "snack"],    pricePerServing: 17.51,  },
    {    id: 100,    title: "Meat balls",    dishTypes: ["lunch", "dinner", "main course", "main dish"],    pricePerServing: 82.41,  },
    {    id: 200,    title: "Chocolate Ice cream",    dishTypes: ["brunch", "dessert"],    pricePerServing: 16.42,  },
    {    id: 201,    title: "Vanilla Ice cream",    pricePerServing: 15.22,    dishTypes: ["dessert", "breakfast", "brunch"],  },
    {    id: 202,    title: "Strawberry ice cream",    pricePerServing: 14.29,  },
];

const oldSort= Array.prototype.sort;
const sortHistory=[];
Array.prototype.sort=function(x){
    sortHistory.push(x);
    return oldSort.bind(this)(x);
};

describe("TW1.1.4 sort(CB) recap exercise: sortDishes", function tw1_1_4() {
    describe("compareDishesCB", function(){
	it("handles dishes with no known type vs starter", function tw1_1_4_1() {
	    expect(compareDishesCB(dishesConst[0], dishesConst[1])).toBe(-1);
	    expect(compareDishesCB(dishesConst[1], dishesConst[0])).toBe(1);
	});

	it("handles starter vs main course", function tw1_1_4_2() {
	    expect(compareDishesCB(dishesConst[1], dishesConst[4])).toBe(-1);
	    expect(compareDishesCB(dishesConst[4], dishesConst[1])).toBe(1);
	});

	it("handles main course vs dessert", function tw1_1_4_3() {
	    expect(compareDishesCB(dishesConst[4], dishesConst[6])).toBe(-1);
	    expect(compareDishesCB(dishesConst[6], dishesConst[4])).toBe(1);
	});
	
	it("returns zero for dishes of same type", function tw1_1_4_4() {
	    expect(compareDishesCB(dishesConst[0], dishesConst[7])).toBe(0);
	    expect(compareDishesCB(dishesConst[1], dishesConst[2])).toBe(0);
	    expect(compareDishesCB(dishesConst[4], dishesConst[4])).toBe(0);
	    expect(compareDishesCB(dishesConst[6], dishesConst[6])).toBe(0);
	});
    });

    describe("sortDishes", function() {
	it("sorts in order: 'no known type', starter, main course, dessert", function tw1_1_4_5() {
	    const array = [
		dishesConst[4],
		dishesConst[6],
		dishesConst[1],
		dishesConst[2],
		dishesConst[7],
	    ];
	    sortHistory.length=0;
	    const sorted = sortDishes(array);
	    const sortParam=sortHistory.pop();
	    expect(sortParam).toBe(compareDishesCB);
	    
	    expect(sorted).toHaveLength(5);
	    expect(sorted[0]).toBe(array[4]); // no type
	    expect(sorted[1]).toBe(array[2]); // starter1
	    expect(sorted[2]).toBe(array[3]); // starter2
	    expect(sorted[3]).toBe(array[0]); // main course
	    expect(sorted[4]).toBe(array[1]); // dessert
	    
	    // Additional test cases
	    const array1 = [
		dishesConst[5],
		dishesConst[4],
		dishesConst[1],
		dishesConst[0],
	    ];
	    const sorted1 = sortDishes(array1);

	    expect(sorted1).toHaveLength(4);
	    expect(sorted1[0]).toBe(dishesConst[0]); // no type
	    expect(sorted1[1]).toBe(dishesConst[1]); // starter
	    expect(sorted1[2]).toBe(dishesConst[4]); // main course
	    expect(sorted1[3]).toBe(dishesConst[5]); // dessert
	});

	it("returns a new array and does not modify the original",  function tw1_1_4_6() {
	    const array = [
		dishesConst[4],
		dishesConst[6],
		dishesConst[2],
		dishesConst[7],
	    ];
	    const arrayCopy = [...array];
	    const sorted = sortDishes(array);

	    expect(sorted).not.toBe(array);
	    expect(array).toEqual(arrayCopy);
	});
    });
});
