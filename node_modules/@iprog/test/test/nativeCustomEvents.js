import { fireEvent, render} from "@testing-library/react-native";
import {getProps, React} from "./nativeJsxMock";

import {vi, expect} from "vitest";
import {customEventWrap} from "./customEventWrap";
import {createElement} from "react";
import { TextInput, Pressable } from "react-native"

vi.mock("/src/utilities");
import {sortDishes, menuPrice, dishType} from "/src/utilities";
sortDishes.mockImplementation(dummySort);
menuPrice.mockImplementation(function(){return Math.random();});
dishType.mockImplementation(function(){return "dummy dish type "+Math.random();});

function dummySort(x){  return x; }

import {getModule} from "./getModule";

const {SidebarView, noSidebarView}= await getModule("/src/native-views/sidebarView");
const {DetailsView, noDetailsView}= await getModule("/src/native-views/detailsView");
const {SearchFormView, noSearchFormView}= await getModule("/src/native-views/searchFormView");
const {SearchResultsView, noSearchResultsView}= await getModule("/src/native-views/searchResultsView");

const cache={};
export const nativeCustomEvents= {
    sidebar(){
	window.React=React;
	const sidebarCustomEvents={} ;
	expect(SidebarView, "could not find or load native sidebar view "+ noSidebarView).toBeTruthy();
	nativeCustomEvents.sidebar.exists= true;
	
	const wrappedSidebarView= customEventWrap(SidebarView);
	
	// finding components using testing library, needs accessibility roles
	const dish= {id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",};
	const {root, getAllByRole, getByText}= render(createElement(wrappedSidebarView, {number:2, dishes:[dish]}));
	
	const buttons= getAllByRole("button");
	fireEvent.press(buttons[0]);
	sidebarCustomEvents["decrease number"]=  wrappedSidebarView.popCustomEvent();
	fireEvent.press(buttons[1]);
	sidebarCustomEvents["increase number"]= wrappedSidebarView.popCustomEvent();
	
	// increasing and decreasing the number should fire the same custom event, only with different parameter
	expect(sidebarCustomEvents["increase number"].name).toBe(sidebarCustomEvents["decrease number"].name);
	
	const flatListProps= getProps(getByText("iprog.FlatList"));
	
	const {getAllByRole:getAllByRoleInRow}= render(flatListProps.renderItem({item:dish}));
	
	const deleteButton=getAllByRoleInRow("button")[0];
	fireEvent.press(deleteButton);
	sidebarCustomEvents["remove dish"]=  wrappedSidebarView.popCustomEvent();
	
	const dishLink= getAllByRoleInRow("link")[0];
	fireEvent.press(dishLink);
	sidebarCustomEvents["select dish"]=  wrappedSidebarView.popCustomEvent();

	// all custom events fired by sidebar get one parameter
	expect(sidebarCustomEvents["increase number"].params.length).toBe(1);
	expect(sidebarCustomEvents["decrease number"].params.length).toBe(1);
	expect(sidebarCustomEvents["select dish"].params.length).toBe(1);
	expect(sidebarCustomEvents["remove dish"].params.length).toBe(1);

    /*
    // finding components using the React tree, no need for roles to be defined

    const rendering= wrappedSidebarView({number:2, dishes:[dishesConst[0]]})
    const buttons= rendering.props.children[0];
    const flatList= rendering.props.children[1];

    buttons.props.children[0].props.onPress();
    sidebarCustomEvents["decrease number"]={...sidebarViewState};

    buttons.props.children[2].props.onPress();
    sidebarCustomEvents["increase number"]={...sidebarViewState};    

    const row= flatList.props.renderItem({item:dishesConst[0]});
    row.props.onPress();
    sidebarCustomEvents["select dish"]={...sidebarViewState};

    row.props.children[2].props.onPress();
    sidebarCustomEvents["remove remove"]={...sidebarViewState};
    */
    
	sidebarCustomEvents.complete= true;
	return sidebarCustomEvents;
    },
    searchForm(){
		window.React=React;
		const searchFormCustomEvents={} ;
		expect(SearchFormView, "could not find or load native sidebar view "+ noSearchFormView).toBeTruthy();
		nativeCustomEvents.searchForm.exists= true;
		
		const wrappedSearchFormView= customEventWrap(SearchFormView);
		const output = render(createElement(
				wrappedSearchFormView,
				{
				text:"",
				type:"",
				dishTypeOptions:["a", "b"]
				}));

		const input = output.UNSAFE_getByType(TextInput);
		fireEvent.changeText(input, "bla2");
		searchFormCustomEvents["search text change"]= wrappedSearchFormView.popCustomEvent("on text input change");

		const picker = output.getByText("iprog.SegmentedControl");
		fireEvent(picker, "valueChange", "bla7");
		searchFormCustomEvents["search type change"]= wrappedSearchFormView.popCustomEvent("on segmented control type change");
		const searchEvent = wrappedSearchFormView.popCustomEvent("on segmented control search triggered");

		fireEvent(input, "submitEditing", {});
		searchFormCustomEvents["search now"]= wrappedSearchFormView.popCustomEvent("on text input keyboard enter (search)");

		expect(searchFormCustomEvents["search now"].name).toBe(searchEvent.name)

	        // custom events handlder for search text and type should receive one parameter (the text or type)
	        expect(searchFormCustomEvents["search text change"].params.length).toBe(1);
        	expect(searchFormCustomEvents["search type change"].params.length).toBe(1);
	
	        // no parameters needed, we just need to know that the user wants to search
	        expect(searchFormCustomEvents["search now"].params.length).toBe(0);

		searchFormCustomEvents.complete= true;
		return searchFormCustomEvents;
    },
    searchResults(){
		expect(SearchResultsView, "could not find or load native search results view "+ noSearchResultsView).toBeTruthy();
		const wrappedSearchResultsView= customEventWrap(SearchResultsView);
		const output= render(createElement(wrappedSearchResultsView, {searchResults:[{
			id: 587203,
			title: "Taco Pizza",
			readyInMinutes: 20,
			servings: 6,
			sourceUrl: "https://laurenslatest.com/taco-salad-pizza-with-doritos/",
			openLicense: 0,
			image: "https://laurenslatest.com/wp-content/uploads/2020/12/Taco-Pizza-02-copy.jpg",
		}]}));
		const flatListProps = getProps(output.getByText("iprog.FlatList"));
		const outputItem = render(flatListProps.renderItem({item: flatListProps.data[0]}));

		const buttons = outputItem.UNSAFE_getAllByType(Pressable);
	        fireEvent.press(buttons[0]);
	        const customEvent= wrappedSearchResultsView.popCustomEvent();
        	// one paramtere expected to be passed to the custom event handler (the chosen dish)
           	expect(customEvent.params.length).toBe(1);
	        return {["search result chosen"]:customEvent, complete:true};
    },
    details(){
		const detailsCustomEvents={};
		expect(DetailsView, "could not find or load native details view "+ noDetailsView).toBeTruthy();

		const wrappedDetailsView= customEventWrap(DetailsView);
		const {getByRole} = render(createElement(
			wrappedDetailsView,
			{
			guests:4,
			dishData:  {id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  analyzedInstructions: [], extendedIngredients:[]},
			isDishInMenu:false
			}));
		const btn= getByRole("button", {name: /add to menu/i});
		expect(btn).toBeTruthy();
		fireEvent.press(btn);
	        detailsCustomEvents["add to menu"]= wrappedDetailsView.popCustomEvent("on add to menu");
		// no parameters needed, the custom event means that the current dish is being added to the menu
	        expect(detailsCustomEvents["add to menu"].params.length).toBe(0);
		detailsCustomEvents.complete= true;
		return detailsCustomEvents;
    },
    getCustomEvents(view){
	if(cache[view])
	    return cache[view];
	try{
	    return cache[view]=this[view]();
	}catch(e){
	    return cache[view]={ error:e, complete:false};
	}
    }
};

//console.log("native", nativeCustomEvents)
