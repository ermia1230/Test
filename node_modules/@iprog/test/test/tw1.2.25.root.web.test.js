import { vi, describe, it, expect, afterEach} from "vitest";
import {getModule} from "./getModule";

vi.mock("mobx-react-lite", function(){
    return {
	observer(x){x.observer=true; return x;}
    };
});

vi.mock("/src/reactjs/sidebarPresenter");
vi.mock("/src/reactjs/searchPresenter");
vi.mock("/src/reactjs/detailsPresenter");
vi.mock("/src/reactjs/summaryPresenter");

vi.mock("/src/vuejs/sidebarPresenter");
vi.mock("/src/vuejs/searchPresenter");
vi.mock("/src/vuejs/detailsPresenter");
vi.mock("/src/vuejs/summaryPresenter");

vi.mock("/src/views/suspenseView");

// we're interested in the order presenters and routers are called
let sequence=0;
function sequenceMock(){ return sequence++;}

vi.mock("vue-router", function(){
    return {
	RouterView:vi.fn(sequenceMock),
	createRouter:vi.fn(),
	createWebHashHistory:vi.fn()
    };
});
import {RouterView} from "vue-router"; // mocked

vi.mock("react-router-dom");
import {RouterProvider} from "react-router-dom";
RouterProvider.mockImplementation(sequenceMock);

import {reactRender, vueRender} from "./render";

import{ReactRoot} from "/src/reactjs/ReactRoot";
import{VueRoot} from "/src/vuejs/VueRoot";

describe.for([
    {   name:"ReactRoot",   render: reactRender,   routerSpy:RouterProvider, root:ReactRoot},
    {   name:"VueRoot",     render: vueRender,     routerSpy:RouterView , root:VueRoot},
])("TW1.2.2.1 $name", async function(framework){
    const path= framework.name=="VueRoot"?"vuejs":"reactjs";
    
    const summary= vi.spyOn(await import("/src/"+path+"/summaryPresenter"), "Summary")
	  .mockImplementation(sequenceMock);

    const {Sidebar}= await getModule("/src/"+ path+"/sidebarPresenter");

    const sidebar= Sidebar && vi.spyOn(await import("/src/"+path+"/sidebarPresenter"), "Sidebar")
	  .mockImplementation(sequenceMock);

    it.runIf(sidebar)("Sidebar rendered before Summary", function(){
	const props={model:{ready:true}};
	const result=framework.render(framework.root, props);

	expect(sidebar).toHaveBeenCalled();
	// props passed to sidebar are same as props passed to Root component
	expect(sidebar.mock.calls[0][0]).toEqual(props);

	// if no router is rendered
	if(!framework.routerSpy.mock.calls[0]){
	    expect(summary).toHaveBeenCalled();
	    // sidebar called before summary (TW1, TW2)
	    expect(sidebar.mock.results[0].value).toBeLessThan(summary.mock.results[0].value);
	    // props passed to summary are same as props passed to Root component
	    expect(summary.mock.calls[0][0]).toEqual(props);
	}
	else{
	    // sidebar called before router placeholder (TW3)
	    expect(sidebar.mock.results[0].value).toBeLessThan(framework.routerSpy.mock.results[0].value);
	}
    });    
});

