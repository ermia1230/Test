import { expect, vi, it, describe} from "vitest";

vi.mock("vue");
import{reactive} from "vue";
reactive.mockImplementation(function(x){return {...x};});

vi.mock("mobx");
import{observable}from "mobx";
observable.mockImplementation(function(x){return {...x};});

vi.mock("/src/firestoreModel");
vi.mock("/src/DinnerModel");
import {model} from "/src/DinnerModel";  // mocked

// filex to check for changes
import.meta.glob("/src/*ReactiveModel.*s");

const reactiveModels=[
    {
	module:"/src/vueReactiveModel.js",
	name:"vue",
	makeReactiveModel:reactive,
    },
    {	
	module:"/src/mobxReactiveModel.js",
	name:"mobx",
	makeReactiveModel: observable,
    }
];

describe("Reactive model", async function(){
    it.for(reactiveModels)
    ("$name defines a reactive model",
     async function(rModel, context){
	 const module= await import(rModel.module); // imports and runs the module
         
	 if(typeof module.reactiveModel==="string"){
             context.skip();
         }
	 
	 expect(rModel.makeReactiveModel).toHaveBeenCalledWith(model);

	 // the module exports the reactive model
	 expect(module.reactiveModel).toBe(rModel.makeReactiveModel.mock.results[0].value);
     });
});

