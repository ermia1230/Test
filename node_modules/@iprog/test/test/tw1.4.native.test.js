import { vi, describe, it, expect, afterEach} from "vitest";
import {render, within, fireEvent} from "@testing-library/react-native";
import {createElement} from "react";
import {getModule} from "./getModule";

import {getProps} from "./nativeJsxMock";

// sidebarView may not exist yet. In that case we skip the test
const {SidebarView, noSidebarView}= await getModule("/src/native-views/sidebarView");

import {checkCB} from "./checkCB";

vi.mock("/src/utilities");
import {sortDishes, menuPrice, dishType} from "/src/utilities";

function dummySort(x){  return x; }
sortDishes.mockImplementation(dummySort);
menuPrice.mockImplementation(function(){return Math.random();});
dishType.mockImplementation(function(){return "dummy dish type "+Math.random();});
	
import {customEventWrap} from "./customEventWrap";

vi.mock("expo-router", function(){ return {
    router:{
	push: vi.fn()
    }
};});

describe.skipIf(noSidebarView)("TW1.4 Handle native events, fire custom events (SidebarView)", function tw1_4() {
    it.for([{number:3, dishes:[]}])
    ("handles press events on the - and + buttons", function tw1_4_1(p){
        const {getAllByRole}= render(createElement(SidebarView, p));
	const buttons= getAllByRole("button");
	expect(buttons.length).toBe(2);
	
	checkCB(getProps(buttons[0]).__onPress, "- button onPress");
	checkCB(getProps(buttons[1]).__onPress, "+ button onPress");

	// the two onPress handlers must be different because they do different things
	// e.g. print props.number -1 and +1
	expect(getProps(buttons[0]).__onPress)
	    .not.toBe(getProps(buttons[1]).__onPress);
    });

    it.for([{number:4, dishes:[], expected:{plus:[5], minus:[3]}},
	    {number:2, dishes:[], expected:{plus:[3], minus:[1]}},
	   ])
    ("press on + or - buttons fire the  onNumberChange custom event with the desired number as parameter", function tw1_4_2(p){
	const{ expected, ...props}= p;

	const wrappedSidebarView= customEventWrap(SidebarView);
	
        const {getAllByRole}= render(createElement(wrappedSidebarView, props));
	const buttons= getAllByRole("button");
	expect(buttons.length).toBe(2);

	fireEvent.press(buttons[0]);
	const minusCustomEvent= wrappedSidebarView.popCustomEvent("by pressing on - button");
	expect(minusCustomEvent.name).toBe("onNumberChange");
	expect(minusCustomEvent.params).toEqual(expected.minus);

	fireEvent.press(buttons[1]);
	const plusCustomEvent= wrappedSidebarView.popCustomEvent("by pressing on + button");
	expect(plusCustomEvent.name).toBe("onNumberChange");
	expect(plusCustomEvent.params).toEqual(expected.plus);
    });


    it.for([{number:4,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		     { id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,}
		    ],
	     expected:{plus:[5], minus:[3]}}	   ])
    ("detects press event on dish link", function tw1_4_3(p){
	const{ expected, ...props}= p;

        const {getByText}= render(createElement(SidebarView, props));
		
	const flatListProps= getProps(getByText("iprog.FlatList"));
	
	const links= p.dishes.map(function(d){
	    return render(flatListProps.renderItem({item:d})).getByRole("link");
	});
	expect(links.length).toBe(2);  // 2 dishes --> 2 links

	checkCB(getProps(links[0]).__onPress, "link onPress");
	checkCB(getProps(links[1]).__onPress, "link onPress");

	// the link onPress handlers must be different because they work with different dishes
	// they can e.g. print the dish id
	expect(getProps(links[0]).__onPress,
	       "onPresslistener for dish links must be a differnt function for each dish (define a press handler nested in the array rendering callback")
	    .not.toBe(getProps(links[1]).__onPress);

    });


    it.for([{number:2,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		    ],
	     expected:{len:1}},
	    {number:5,
	     dishes:
	     [{ id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,},
	      {  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
	     ],
	     expected:{len:2}}
	   ])
    ("press on dish link fires a custom event and passes the dish object as parameter", function tw1_4_4(p){
	const{ expected, ...props}= p;
	const wrappedSidebarView= customEventWrap(SidebarView);
	const {getByText}= render(createElement(wrappedSidebarView, props));
	const flatListProps= getProps(getByText("iprog.FlatList"));
	
	const links= p.dishes.map(function(d){
	    const link= render(flatListProps.renderItem({item:d})).getByRole("link");
	    fireEvent.press(link);
	    link.customEvent= wrappedSidebarView.popCustomEvent("by pressing on link");
	    return link;
	    
	});
	
	expect(links.length).toBe(expected.len); 

	let linkEventName;
	links.forEach(function(link, index){
	    expect(link.customEvent.params).toEqual([p.dishes[index]]);
	    if(index)
		expect(linkEventName, "all link custom events must have the same name")
		.toBe(link.customEvent.name);
	    linkEventName= link.customEvent.name;
	});
	expect(linkEventName).not.toBe("onNumberChange");
	
    });


    it.for([{number:4,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		     { id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,}
		    ],
	     expected:{plus:[5], minus:[3]}}	   ])
    ("detects press event on X button", function tw1_4_5(p){
	const{ expected, ...props}= p;


	const {getByText}= render(createElement(SidebarView, props));
	const flatListProps= getProps(getByText("iprog.FlatList"));
	
	const buttons= p.dishes.map(function(d){
	    return within(render(flatListProps.renderItem({item:d})).getByRole("link")).getByRole("button");
	});
	expect(buttons.length).toBe(2);  // 2 dishes --> 2 x buttons

	checkCB(getProps(buttons[0]).__onPress, "x button onPress");
	checkCB(getProps(buttons[1]).__onPress, "x button onPress");

	// the button press handlers must be different because they work with different dishes
	// they can e.g. print the dish id
	expect(getProps(buttons[0]).__onPress,
	       "onPress listener for X buttons must be a differnt function for each dish (define a press handler nested in the array rendering callback")
	    .not.toBe(getProps(buttons[1]).__onPress);

    });


    it.for([{number:2,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		    ],
	     expected:{len:1}},
	    {number:5,
	     dishes:
	     [{ id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,},
	      {  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
	     ],
	     expected:{len:2}}
	   ])
    ("press on X button fires a custom event and passes the dish object as parameter", function tw1_4_6(p){
	const{ expected, ...props}= p;

	const wrappedSidebarView= customEventWrap(SidebarView);
	const {getByText}= render(createElement(wrappedSidebarView, props));
	const flatListProps= getProps(getByText("iprog.FlatList"));
	
	const buttons= p.dishes.map(function(d){
	    const btn= render(flatListProps.renderItem({item:d})).getByRole("button");
	    fireEvent.press(btn);
	    btn.customEvent= wrappedSidebarView.popCustomEvent("by pressing on X button");
	    return btn;
	});
	expect(buttons.length).toBe(expected.len);

	
	let buttonEventName;
	buttons.forEach(function(button, index){
	    expect(button.customEvent.params).toEqual([p.dishes[index]]);
	    if(index)
		expect(buttonEventName, "all X button custom events must have the same name")
		.toBe(button.customEvent.name);
	    buttonEventName= button.customEvent.name;
	});

	expect(buttonEventName).not.toBe("onNumberChange");
	const link=  render(flatListProps.renderItem({item:p.dishes[0]})).getByRole("link");
	fireEvent.press(link);
	const linkEventName=  wrappedSidebarView.popCustomEvent()?.name;
	if(linkEventName)
	    expect(linkEventName, "link and X button custom event names must be different")
	    .not.toBe(buttonEventName);
	// else the link tests above will fail
    });
    
});
