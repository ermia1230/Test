import { vi, describe, it, expect, afterEach} from "vitest";
import {render, fireEvent, cleanup} from "@testing-library/react";
import {createElement, Fragment} from "react";
import {getModule} from "./getModule";

// re-run the tests if sidebarView.jsx changes, getModule doesn't do that
import.meta.glob("/src/views/sidebarView.*sx")

// sidebarView may not exist yet. In that case we skip the test
const {SidebarView, noSidebarView}= await getModule("/src/web-views/sidebarView");

import {checkCB} from "./checkCB";

vi.mock("/src/utilities");
import {sortDishes, menuPrice, dishType} from "/src/utilities";
function dummySort(x){  return x; }
sortDishes.mockImplementation(dummySort);
menuPrice?.mockImplementation(function(){return Math.random();});
dishType?.mockImplementation(function(){return "dummy dish type "+Math.random();});

import {getProps} from "./webJsxMock";
import {customEventWrap} from "./customEventWrap";

let sidebarText;
try{
    sidebarText= SidebarView && typeof SidebarView({number:2, dishes:[]})=="string" ;
}catch(e){}

describe.skipIf(noSidebarView || sidebarText)("TW1.4  Handle native events, fire custom events (SidebarView)", function tw1_4() {
    afterEach(cleanup);
    it.for([{number:3, dishes:[]}])
    ("handles click events on the - and + buttons", function tw1_4_1(p){
        const {getAllByRole}= render(createElement(SidebarView, p));
	const buttons= getAllByRole("button");
	expect(buttons.length).toBe(2);

	checkCB(getProps(buttons[0]).onClick, "- button onClick");
	checkCB(getProps(buttons[1]).onClick, "+ button onClick");

	// the two click handlers must be different because they do different things
	// e.g. print props.number -1 and +1
	expect(getProps(buttons[0]).onClick)
	    .not.toBe(getProps(buttons[1]).onClick);
    });

    it.for([{number:4, dishes:[], expected:{plus:[5], minus:[3]}},
	    {number:2, dishes:[], expected:{plus:[3], minus:[1]}},
	   ])
    ("click on + or - buttons fire the  onNumberChange custom event with the desired number as parameter", function tw1_4_2(p){
	const{ expected, ...props}= p;

	const wrappedSidebarView= customEventWrap(SidebarView);
	
        const {getAllByRole}= render(createElement(wrappedSidebarView, props));
	const buttons= getAllByRole("button");
	expect(buttons.length).toBe(2);
	fireEvent.click(buttons[0]);
	const minusCustomEvent= wrappedSidebarView.popCustomEvent("by clicking on - button");
	fireEvent.click(buttons[1]);
	const plusCustomEvent= wrappedSidebarView.popCustomEvent("by clicking on + button");

	expect(minusCustomEvent.params).toEqual(expected.minus);
	expect(plusCustomEvent.params).toEqual(expected.plus);
    });


    it.for([{number:4,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		     { id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,}
		    ],
	     expected:{plus:[5], minus:[3]}}	   ])
    ("detects click event on dish link", function tw1_4_3(p){
	const{ expected, ...props}= p;

        const {getAllByRole}= render(createElement(SidebarView, props));
	const links= getAllByRole("link");
	expect(links.length).toBe(2);  // 2 dishes --> 2 links

	checkCB(getProps(links[0]).onClick, "dish link onClick");
	checkCB(getProps(links[1]).onClick, "dish link onClick");

	// the link click handlers must be different because they work with different dishes
	// they can e.g. print the dish id
	expect(getProps(links[0]).onClick,
	       "onClick listener for dish links must be a differnt function for each dish (define a click handler nested in the array rendering callback")
	    .not.toBe(getProps(links[1]).onClick);

    });


    it.for([{number:2,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		    ],
	     expected:{len:1}},
	    {number:5,
	     dishes:
	     [{ id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,},
	      {  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
	     ],
	     expected:{len:2}}
	   ])
    ("click on dish link fires a custom event and passes the dish object as parameter", function tw1_4_4(p){
	const{ expected, ...props}= p;

	const wrappedSidebarView= customEventWrap(SidebarView);
	
        const {getAllByRole}= render(createElement(wrappedSidebarView, props));
	const links= getAllByRole("link");
	expect(links.length).toBe(expected.len); 

	let linkEventName;
	links.forEach(function(link, index){
	    fireEvent.click(link);
	    const customEvent= wrappedSidebarView.popCustomEvent("by clicking on dish link");
	    expect(customEvent.params).toEqual([p.dishes[index]]);
	    if(index)
		expect(linkEventName, "all link custom events must have the same name")
		.toBe(customEvent.name);
	    linkEventName= customEvent.name;
	});
	expect(linkEventName).not.toBe("onNumberChange");
	
    });


    it.for([{number:4,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		     { id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,}
		    ],
	     expected:{plus:[5], minus:[3]}}	   ])
    ("detects click event on X button", function tw1_4_5(p){
	const{ expected, ...props}= p;

        const {getAllByRole}= render(createElement(SidebarView, props));
	const [minus, plus, ...buttons]= getAllByRole("button");
	expect(buttons.length).toBe(2);  // 2 dishes --> 2 x buttons

	checkCB(getProps(buttons[0]).onClick, "x button onClick");
	checkCB(getProps(buttons[1]).onClick, "x button onClick");

	// the link click handlers must be different because they work with different dishes
	// they can e.g. print the dish id
	expect(getProps(buttons[0]).onClick,
	       "onClick listener for X buttons must be a differnt function for each dish (define a click handler nested in the array rendering callback")
	    .not.toBe(getProps(buttons[1]).onClick);

    });


    it.for([{number:2,
	     dishes:[{  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
		    ],
	     expected:{len:1}},
	    {number:5,
	     dishes:
	     [{ id: 3,   title: "Baked Brie with Peaches",  dishTypes: ["snack", "starter"], pricePerServing: 10.81,},
	      {  id: 2,  title: "Sourdough Starter",  pricePerServing: 11.22,  dishTypes: ["starter", "appetizer"],  summary: "Here is how you make it... Lore ipsum...",},
	     ],
	     expected:{len:2}}
	   ])
    ("click on X button fires a custom event and passes the dish object as parameter", function tw1_4_6(p){
	const{ expected, ...props}= p;

	const wrappedSidebarView= customEventWrap(SidebarView);
	
        const {getAllByRole}= render(createElement(wrappedSidebarView, props));
	const [minus, plus, ...buttons]= getAllByRole("button");
	expect(buttons.length).toBe(expected.len);

	
	let buttonEventName;
	buttons.forEach(function(button, index){
	    fireEvent.click(button);
	    const customEvent= wrappedSidebarView.popCustomEvent("by clicking on X button");
	    expect(customEvent.params).toEqual([p.dishes[index]]);
	    if(index)
		expect(buttonEventName, "all X button custom events must have the same name")
		.toBe(customEvent.name);
	    buttonEventName= customEvent.name;
	});

	expect(buttonEventName).not.toBe("onNumberChange");
	const links= getAllByRole("link");
	if(links[0]){
	    fireEvent.click(links[0]);
	    const linkEventName=  wrappedSidebarView.popCustomEvent();
	    if(linkEventName)
		expect(linkEventName, "link and X button custom event names must be different")
		.not.toBe(buttonEventName);
	}
	// else the link tests above will fail
    });
    
});
