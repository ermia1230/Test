import { vi, describe, it, expect, afterEach, beforeEach } from "vitest";
import {model} from "/src/DinnerModel";

import {getModule} from "./getModule";

// re-run these tests if dishSource.js changes, getModule does not do that
import.meta.glob("/src/dishSource.*s")

vi.mock("/src/dishSource");
const {searchDishes}= await getModule("/src/dishSource");

vi.mock("/src/resolvePromise");
const {resolvePromise}= await getModule("/src/resolvePromise");

const searchParams= model.searchParams;

describe.runIf(model.searchParams && searchDishes && resolvePromise)("TW2.2.2 Promise State in Model: search", function tw2_2_2() {
    it("Model has searchParams", function tw2_2_2_1() {
	expect(model.searchParams).toEqual({});
    });

    it("setSearchQuery and setSearchType save their arguments in searchParams", function tw2_2_2_2(arr) {
	const text= "pizza"+Math.random();
	const type= "main course"+ Math.random();
	model.setSearchQuery(text);
	model.setSearchType(type);

	expect(model.searchParams).toHaveProperty("query", text);
	expect(model.searchParams).toHaveProperty("type", type);
    });

    it("Model defines property searchResultsPromiseState", function tw2_2_2_3() {
	expect(model.searchResultsPromiseState).toBeDefined();
	expect(model.searchResultsPromiseState).toEqual({});
    });

    it("doSearch performs a search with the given params and resolves the promise into searchResultsPromiseState", function tw2_2_2_4() {
	searchDishes.mockImplementation(function(){ return new Object(); });
	
	const searchParams = { query: "ice cream"+Math.random(), type: "dessert"+Math.random() };
	const dummy= new Object();
	model.searchResultsPromiseState=dummy;
	
	model.doSearch(searchParams);

	expect(searchDishes).toHaveBeenCalledWith(searchParams);
	expect(searchDishes).toHaveBeenCalledTimes(1);
	const searchPromise= searchDishes.mock.results[0].value;
	expect(resolvePromise).toHaveBeenCalledWith(searchPromise, dummy);
    });
});


describe.runIf(searchParams)("TW2.2.2 reactive model setup runs a search", async function(){
    vi.doMock("/src/DinnerModel");
    const model= (await import("/src/DinnerModel"))?.model;

    it.for([
	{
     	    module:"/src/vueReactiveModel.js",
            name:"vue",
	},
	{
     	    module:"/src/mobxReactiveModel.js",
            name:"mobx",
	}
    ])
    ("$name reactive model initialization calls doSearch",
      async function(rModel, context){
          const ret= await import(rModel.module); // import the module and get its exported object
          
          if(typeof ret?.reactiveModel==="string"){
              console.warn("return an object to enable");
              context.skip();
          }

	  expect(model.doSearch).toHaveBeenCalledWith({});
      });

});
