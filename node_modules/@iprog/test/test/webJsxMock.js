import {createElement, Fragment} from "react";


function transformProps(props){
    // the array rendering key is removed by React from the props so we add it as another prop
    if(props?.key)
	return {...props, "data-key":props.key};
    return props;
}

window.React={
    createElement(comp, props, ...rest){
	return createElement(comp, transformProps(props), ...rest);
    },
    Fragment,
};

export function getProps(elem){
    // the react implementation may change.
    // If it does, we can store some props (e.g. props.onClick?.toString()) during transformProps

    if(elem.tagName==="SELECT"){
	// happy-dom SELECT defines a proxy handler ownKeys, so the SELECT element only sees the keys "0", "1"
	const opt= elem[0];
	const k= Object.keys(opt).find(x=>x.startsWith("__reactProps"));
	// once we know the key name, it is accessible
	return elem[k];
    }
	
    return {...elem[Object.keys(elem).find(x=>x.startsWith("__reactProps"))]};
}



