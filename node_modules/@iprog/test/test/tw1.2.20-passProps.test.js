import { vi, describe, it, expect, afterEach} from "vitest";

// test should re-run if any of these files changes:
import.meta.glob("/src/vuejs/summaryPresenter.*sx");
import.meta.glob("/src/reactjs/summaryPresenter.*sx");
import.meta.glob("/src/vuejs/sidebarPresenter.*sx");
import.meta.glob("/src/reactjs/sidebarPresenter.*sx");

vi.mock("/src/utilities");
import {shoppingList} from "/src/utilities"; // mocked
shoppingList?.mockImplementation(function(d){ return [Math.random()];});

import {SummaryView} from "/src/views/summaryView";  // aliased to the dummy/ mock 
import {SidebarView} from "/src/views/sidebarView";  // aliased to the dummy/ mock 
import {getModule} from "./getModule";

vi.mock("mobx-react-lite");
import {observer} from "mobx-react-lite";
observer.mockImplementation(function(x){ x.observer=true; return x; }) ;

import {reactRender, vueRender} from "./render";

describe.for([
	{name:"React/native",	render: reactRender , path:"reactjs"},
	{name:"Vue",	render: vueRender , path:"vuejs" },
])("TW1.2.2 Pass props from $name Presenter to View", async function(framework){
    const { Summary} = await getModule("/src/"+framework.path+"/summaryPresenter");
   
    describe("Summary Presenter", function(){
	it.for([
	    { guests: 2, dishes: [] },
	    { guests: 2, dishes: [] },
	])("renders SummaryView with correct people prop", function({guests, dishes}, context){
	    const model = {
		numberOfGuests: guests,
		dishes: [...dishes],
	    };
	    const output= framework.render(Summary, {model});
	    
	    expect(SummaryView).toHaveBeenCalledTimes(1);
	    const summaryViewProps=SummaryView.mock.lastCall[0];
	    const summaryViewResult=SummaryView.mock.results[0].value;

	    if(typeof summaryViewProps.people=="string")
		context.skip();
	    
	    expect(summaryViewProps).toEqual(
		expect.objectContaining({
		    people: guests,
		}),
	    );

	    expect(output.container.textContent, "do not just render SummaryView, return the rendering!"
		  ).toBe(summaryViewResult);
	});
	
	it.runIf(shoppingList).for([
	    { guests: 3, dishes: dish1 },
	    { guests: 5, dishes: dish2 },
	])("passes correct ingredients prop to SummaryView", function({guests, dishes, expectedIngredients}) {
	    const model = { numberOfGuests: guests, dishes };
	    framework.render(Summary, {model});
	    expect(SummaryView).toHaveBeenCalled();
	    expect(shoppingList).toHaveBeenCalled();

	    const summaryViewProps=SummaryView.mock.lastCall[0];
	    expect(summaryViewProps).toEqual(
		expect.objectContaining({
		    ingredients: shoppingList.mock.results[0].value
		})
	    );
	});
	
	
	if(framework.name.includes("React"))
	    it("Summary is an observer", function(){
		expect(Summary.observer).toBeTruthy();   // see mobx-react-lite mock above
	    });
    });

    const {Sidebar}= await getModule("/src/"+ framework.path+"/sidebarPresenter");

    describe.runIf(Sidebar)("Sidebar Presenter", function(){
	it.for([
	    { guests: 7, dishes: [] },
	    { guests: 10, dishes: [] },
	])("renders SidebarView with correct number prop", function({guests}) {
	    const model = {
		numberOfGuests: guests,
		dishes: [],
	    };
	    const output= framework.render(Sidebar, {model});
	    
	    expect(SidebarView).toHaveBeenCalledTimes(1);
	    const sidebarViewProps=  SidebarView.mock.lastCall[0];
	    const sidebarViewResult= SidebarView.mock.results[0].value;

	    expect(sidebarViewProps).toEqual(
		expect.objectContaining({
		    number: guests,
		}),
	    );

	    expect(output.container.textContent, "do not just render SidebarView, return the rendering!"
		  ).toBe(sidebarViewResult);

	});
	
	it.for([
	    { guests: 7, dishes: [dish1] },
	    { guests: 10, dishes: [dish2, dish1] },
	])("passes correct dishes prop to SidebarView", function({guests, dishes}) {
	    const model = { numberOfGuests: guests, dishes };
	    const output= framework.render(Sidebar, {model});
	    
	    expect(SidebarView).toHaveBeenCalledTimes(1);
	    const sidebarViewProps= SidebarView.mock.calls[0][0];
	    
	    expect(sidebarViewProps).toEqual(
		expect.objectContaining({
		    dishes: expect.arrayContaining(
			dishes.map((dish) =>
			    expect.objectContaining({
				id: dish.id,
				title: dish.title,
			    }),
			),
		    ),
		}),
	    );
	});
	
	if(framework.name.includes("React"))
	    it("Sidebar is an observer", function(){
		expect(Sidebar.observer).toBeTruthy();   // see mobx-react-lite mock above
	    });
    });
});

const dish1=    {
    id: 200,
    title: "Chocolate Ice cream",
    dishTypes: ["brunch", "dessert"],
    pricePerServing: 16.42,
    instructions: "Here is how you make it... Lore ipsum... bla",
    sourceUrl:"http://blabla.com/",
    image:"http://blabla.com/image.gif",
    extendedIngredients: [/*ingredients are tested separately*/]
};
const dish2=      {
    id: 201,
    title: "Vanilla Ice cream",
    pricePerServing: 15.22,
    dishTypes: ["dessert", "breakfast", "brunch"],
    instructions: "Here is how you make it... Lore ipsum...",
    sourceUrl:"http://bla.com/",
    image:"http://bla.com/img.jpg",
    extendedIngredients: [/*tested separately*/],
};

