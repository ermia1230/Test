import { vi, describe, it, expect, afterEach} from "vitest";
import {render, screen, cleanup} from "@testing-library/react";
import {createElement, Fragment} from "react";
import {getModule} from "./getModule";

import {SummaryView} from "/src/web-views/summaryView";

import {checkArrayCB} from "./checkCB";

vi.mock("/src/utilities");
import {sortIngredients} from "/src/utilities";

function dummyRow(){ return createElement("tr",{}, createElement("td", {},"dummy rendered array"));}
function dummySort(){  return {map: vi.fn(dummyRow)}; }
function dummyTable(x){ return createElement("table",{}, createElement("tbody", {},x));}

sortIngredients.mockImplementation(dummySort);
	
import {getProps} from "./webJsxMock";

describe("TW1.3  Vue/React  Array Rendering and basic CSS", function tw1_3() {
    afterEach(cleanup);
    it.for([
	{
	    people:1,
	    ingredients: [
		{ name: "Worcestershire sauce", aisle: "Spices", amount: 6, unit: "ml", id: 1122,  },
		{ id: 1, name: "water", aisle: "(home)", amount: 80, unit: "ml" },
		{ name: "egg", amount: 5, unit: "pcs", aisle: "Eggs & Dairy", id: 1101 }
	    ],
	    expected:{index:1, k:1, header:"Summary for 1 person:", ingr:"water", quant:"80.00", mu:"ml", where:"(home)"  }
	},
        {
	    people:5,
	    ingredients: [
		{ id: 1, name: "water", aisle: "(home)", amount: 80, unit: "ml" },
		{ name: "egg", amount: 5, unit: "pcs", aisle: "Eggs & Dairy", id: 1101 },
		{ aisle: "Produce",  name: "small onion, diced", amount: 0.25,unit: "pcs", id: 1117,  }
	    ],
	    expected:{index:2, k:1117, header:"Summary for 5 persons:", ingr:"small onion, diced", quant:"1.25", mu:"pcs", where:"Produce" }
	}
    ])
    ( "SummaryView table content (render table rows to enable)",
      function tw1_3_1(p, test){
	  const {expected, ...props}=p;

	  const output= render(createElement(SummaryView, props));

          const tableRows = output.queryAllByRole('row');
          if(!tableRows.length)
              test.skip();

	  // we expect the header and the dummy row
	  expect(tableRows.length).toBe(2);

          expect(tableRows[0].cells.length, "expecting 4 columns").toBe(4);
	  [...tableRows[0].cells].forEach(function(cell){
              expect(cell.tagName).toBe("TH");
          });

	  expect(sortIngredients).toHaveBeenCalledWith(p.ingredients);
	  const sortIngredientsResult=sortIngredients.mock.results[0].value; 
	  expect(sortIngredientsResult.map).toHaveBeenCalled();    
	  
	  // we replace array rendering with a dummy table row. It must be the last row
	  expect(tableRows.slice(-1)?.[0].cells[0].textContent).toBe("dummy rendered array");

	  // the map() callback:
	  const mapParam=sortIngredientsResult.map.mock.calls[0][0];
	  expect(sortIngredientsResult.map.mock.calls[0].length).toBe(1);  // map only has one parameter!

	  // cleanup to prepare another render 
	  cleanup();
	  // we render one ingredient (indicated by expected.index) by invoking the map() callback
	  const rows= render(dummyTable(mapParam(p.ingredients[expected.index]))).queryAllByRole("row");

	  expect(rows.length).toBe(1);
	  const tds= rows[0].cells;

          expect(tds.length, "expecting 4 columns").toBe(4);

          [...tds].forEach(function(cell){
              expect(cell.tagName).toEqual("TD");
          });

          expect(tds[0].textContent.trim()).toBe(expected.ingr);
          expect(tds[1].textContent.trim()).toBe(expected.where);
          expect(tds[2].textContent.trim()).toBe(expected.quant);
          expect(tds[3].textContent.trim()).toBe(expected.mu);

	  // must use a css class, not inline style
	  expect(tds[2].className).toBeTruthy();
	  // css align 3rd column to the right
	  expect(window.getComputedStyle(tds[2]).textAlign).toBe("right");

	  // we've copied the key to the data-key prop so we can test it. It should be the ingredient id
	  expect(getProps(rows[0])["data-key"]).toBe(expected.k);

	  //------- checking the person/persons
	  // TODO: very strange code, can't this be done with testing library?
	  const div=  SummaryView(props);

	  let header = div.props.children[0] + div.props.children[1].props.children;
	  let index = div.props.children.findIndex(child =>
				typeof child === 'string' && child.includes(':')
	  );
	  if (index !== -1) {
              header += div.props.children.slice(2, index+1).join('');
	  } else {
	      index = typeof div.props.children[3] === 'string' ? 3 : 2;
	      header += div.props.children.slice(2, index+1).join(''); 
	  }

	  // conditional rendering exercise
	  expect(header).toBe(expected.header);
	  

	  checkArrayCB(mapParam, "map", "rendering ingredients");
      });

});
    
