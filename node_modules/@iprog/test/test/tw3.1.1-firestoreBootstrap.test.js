import { expect, vi, it, describe} from "vitest";

vi.mock("vue");
import{reactive, watch} from "vue";
reactive.mockImplementation(function(x){return {...x};});

vi.mock("mobx");
import{observable, reaction}from "mobx";
observable.mockImplementation(function(x){return {...x};});

vi.mock("/src/firestoreModel");
import {connectToPersistence} from "/src/firestoreModel";

vi.mock("/src/DinnerModel");

// if any of these files change, we re-run tests
import.meta.glob("/src/*ReactiveModel.*s");

const reactiveModels=[
    {
	module:"/src/vueReactiveModel.js",
	name:"vue",
	installEffect: watch
    },
    {	
	module:"/src/mobxReactiveModel.js",
	name:"mobx",
	installEffect: reaction
    }
];
			  
describe.runIf(connectToPersistence)
("Reactive model initialization calls connectToPersistence with correct params", async function(){
    it.for(reactiveModels)
    ("$name reactive model",
     async function(rModel, context){
	 const module= await import(rModel.module); // imports and runs the module
         
	 if(typeof module.reactiveModel==="string"){
             context.skip();
         }
	 
	 expect(connectToPersistence).toHaveBeenCalledWith(module.reactiveModel, rModel.installEffect);
     });
});
